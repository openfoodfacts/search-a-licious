# base ES service definition
x-base-es-service: &base-es-service
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: ${RESTART_POLICY:-always}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -u elastic:elastic -s -f localhost:9200/_cat/health >/dev/null || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


# shared environment for ES
x-base-es-envs: &base-es-envs
  cluster.name: ${CLUSTER_NAME}
  cluster.initial_master_nodes: es01,es02
  bootstrap.memory_lock: "true"
  xpack.security.enabled: "false"
  xpack.license.self_generated.type: ${LICENSE:-basic}
  http.cors.enabled: "true"
  http.cors.allow-origin: http://localhost:8080,http://127.0.0.1:8080
  http.cors.allow-headers: X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
  http.cors.allow-credentials: "true"


x-api-common: &api-common
  image: ghcr.io/openfoodfacts/search-a-licious/search_service_image:${TAG:-dev}
  restart: ${RESTART_POLICY:-always}
  environment:
    - ELASTICSEARCH_URL=http://es01:9200
    - SENTRY_DNS
    - LOG_LEVEL
    - REDIS_HOST
    - REDIS_PORT
    # Directory where we cache downloaded taxonomies files
    - TAXONOMY_CACHE_DIR
    # Path of the yaml configuration file
    - CONFIG_PATH
    # URL of the OFF API
    - OFF_API_URL
    - ALLOWED_ORIGINS
  networks:
    - default
    - common_net
  volumes:
    - ./data:/opt/search/data


services:
  es01:
    <<: *base-es-service
    environment:
      <<: *base-es-envs
      node.name: es01
      discovery.seed_hosts: es02
    volumes:
      - esdata01:/usr/share/elasticsearch/data

  es02:
    <<: *base-es-service
    environment:
      <<: *base-es-envs
      node.name: es02
      discovery.seed_hosts: es01
    depends_on:
      - es01
    volumes:
      - esdata02:/usr/share/elasticsearch/data

  # elasticsearch browser
  elasticvue:
    image: cars10/elasticvue
    restart: ${RESTART_POLICY:-always}
    environment:
      - NGINX_BASIC_AUTH_USER_PASSWD
    ports:
      - "${ES_VUE_EXPOSE}:8080"
    volumes:
      # we add an entrypoint to eventually add basic auth
      - ./docker/elasticvue-entrypoint.sh:/bin/elasticvue-entrypoint.sh:ro
    entrypoint: ["/bin/elasticvue-entrypoint.sh"]
    # because redefining entrypoint, oblige to redefine commandâ€¦
    command: ["nginx", "-g", "daemon off;"]

  api:
    <<: *api-common

  # service listening to redis for updates
  updater:
    <<: *api-common
    command: ["python3", "-m", "app", "run-update-daemon"]

  # frontend is nginx serving static files and proxying to API
  search_frontend:
    # this is the nginx frontend serving react static version or redirecting queries
    image: ghcr.io/openfoodfacts/search-a-licious/search_front_image:${TAG:-dev}
    restart: ${RESTART_POLICY:-always}
    depends_on:
      - api
    environment:
      # enabling prod config and disabling dev one
      PROD_UI_SUFFIX: "${PROD_UI_SUFFIX-}"
      DEV_UI_SUFFIX: "${DEV_UI_SUFFIX--static}"
    volumes:
      # Nginx, we use templates dir to be able to use environment vars
      - ./confs/nginx.conf:/etc/nginx/templates/default.conf.template
    ports:
      - ${SEARCH_EXPOSE:-127.0.0.1:8000}:80
    build:
      context: frontend
      args:
        USER_UID: ${USER_UID:-1000}
        USER_GID: ${USER_GID:-1000}



volumes:
  esdata01:
  esdata02:

networks:
  # this is the network shared with product opener
  common_net:
    name: ${COMMON_NET_NAME}
