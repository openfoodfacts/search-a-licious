$defs:
  ESIndexConfig:
    description: 'This is the configuration for the main index containing the data.


      It''s used to create the index in ElasticSearch, and configure its mappings

      (along with the *fields* config)'
    properties:
      name:
        description: 'Name of the index alias to use.


          Search-a-licious will create an index using this name and an import date,

          but alias will always point to the latest index.


          The alias must not already exists in your ElasticSearch instance.'
        title: Name
        type: string
      number_of_shards:
        default: 4
        description: 'Number of shards to use for the index.


          Shards are useful to distribute the load on your cluster.

          (see [index settings](https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#_static_index_settings))'
        title: Number Of Shards
        type: integer
      number_of_replicas:
        default: 1
        description: 'Number of replicas to use for the index.


          More replica means more resiliency but also more disk space and memory.


          (see [index settings](https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#_static_index_settings))'
        title: Number Of Replicas
        type: integer
      id_field_name:
        description: 'Name of the field to use for `_id`.

          it is mandatory to provide one.


          If your dataset does not have an identifier field,

          you should use a document preprocessor to compute one (see `preprocessor`).'
        title: Id Field Name
        type: string
      last_modified_field_name:
        description: 'Name of the field containing the date of last modification,

          in your indexed objects.


          This is used for incremental updates using Redis queues.


          The field value must be an int/float representing the timestamp.'
        title: Last Modified Field Name
        type: string
    required:
    - name
    - id_field_name
    - last_modified_field_name
    title: ESIndexConfig
    type: object
  FieldConfig:
    properties:
      name:
        default: ''
        description: name of the field (must be unique
        title: Name
        type: string
      type:
        allOf:
        - $ref: '#/$defs/FieldType'
        description: "Type of the field\n\nSupported field types in Search-a-Licious\
          \ are:\n\n    * keyword: string values that won't be interpreted (tokenized).\n\
          \      Good for things like tags, serial, property values, etc.\n    * date:\
          \ Date fields\n    * double, float, half_float, scaled_float:\n      different\
          \ ways of storing floats with different capacity\n    * short, integer,\
          \ long, unsigned_long :\n      integers (with different capacity:  8 / 16\
          \ / 32 bits)\n    * bool: boolean (true / false) values\n    * text: a text\
          \ which is tokenized to enable full text search\n    * text_lang: like text,\
          \ but with different values in different languages.\n      Tokenization\
          \ will use analyzers specific to each languages.\n    * taxonomy: a field\
          \ akin to keyword but\n      with support for matching using taxonomy synonyms\
          \ and translations\n      (and in fact also a text mapping possibility)\n\
          \    * disabled: a field that is not stored nor searchable\n      (see [Elasticsearch\
          \ help])\n    * object: this field contains a dict with sub-fields.\n  \
          \  * nested: this field contains an array of objects.\n    \n\n[Elasticsearch\
          \ help]: https://www.elastic.co/guide/en/elasticsearch/reference/current/enabled.html"
      required:
        default: false
        description: 'if required=True, the field is required in the input data


          An entry that does not contains a value for this field will be rejected.'
        title: Required
        type: boolean
      input_field:
        anyOf:
        - type: string
        - type: 'null'
        default: null
        description: 'name of the input field to use when importing data


          By default, Search-a-licious use the same name as the field name.


          This is useful to index the same field using different types or configurations.'
        title: Input Field
      split:
        default: false
        description: 'do we split the input field with `split_separator` ?


          This is useful if you have some text fields that contains list of values,

          (for example a comma separated list of values, like apple,banana,carrot).


          You must set split_separator to the character that separates the values
          in the dataset.'
        title: Split
        type: boolean
      full_text_search:
        default: false
        description: 'Wether this field in included on default full text search.


          If `false`, the field is only used during search

          when filters involving this field are provided

          (as opposed to full text search expressions without any explicit field).'
        title: Full Text Search
        type: boolean
      bucket_agg:
        default: false
        description: 'do we add an bucket aggregation to the elasticsearch query for
          this field.


          It is used to return a ''faceted-view'' with the number of results for each
          facet value,

          or to generate bar charts.


          Only valid for keyword, taxonomy or numeric field types.'
        title: Bucket Agg
        type: boolean
      taxonomy_name:
        anyOf:
        - type: string
        - type: 'null'
        default: null
        description: 'the name of the taxonomy associated with this field.


          It must only be provided for taxonomy field type.'
        title: Taxonomy Name
      fields:
        anyOf:
        - additionalProperties:
            $ref: '#/$defs/FieldConfig'
          type: object
        - type: 'null'
        default: null
        description: 'Sub fields configuration


          This is valid only for "object" and "nested" fields,

          and must be provided in this case.


          Keys are field names,

          values contain the field configuration.


          Note: that although dynamic fields are supported in Elasticsearch,

          we don''t support them in Search-a-licious,

          because they lead to nasty bugs, and are not meant for production use.'
        title: Fields
    required:
    - type
    title: FieldConfig
    type: object
  FieldType:
    description: "Supported field types in Search-a-Licious are:\n\n    * keyword:\
      \ string values that won't be interpreted (tokenized).\n      Good for things\
      \ like tags, serial, property values, etc.\n    * date: Date fields\n    * double,\
      \ float, half_float, scaled_float:\n      different ways of storing floats with\
      \ different capacity\n    * short, integer, long, unsigned_long :\n      integers\
      \ (with different capacity:  8 / 16 / 32 bits)\n    * bool: boolean (true /\
      \ false) values\n    * text: a text which is tokenized to enable full text search\n\
      \    * text_lang: like text, but with different values in different languages.\n\
      \      Tokenization will use analyzers specific to each languages.\n    * taxonomy:\
      \ a field akin to keyword but\n      with support for matching using taxonomy\
      \ synonyms and translations\n      (and in fact also a text mapping possibility)\n\
      \    * disabled: a field that is not stored nor searchable\n      (see [Elasticsearch\
      \ help])\n    * object: this field contains a dict with sub-fields.\n    * nested:\
      \ this field contains an array of objects.\n    \n\n[Elasticsearch help]: https://www.elastic.co/guide/en/elasticsearch/reference/current/enabled.html"
    enum:
    - keyword
    - date
    - half_float
    - scaled_float
    - float
    - double
    - integer
    - short
    - long
    - unsigned_long
    - bool
    - text
    - text_lang
    - taxonomy
    - disabled
    - object
    - nested
    title: FieldType
    type: string
  IndexConfig:
    description: 'This object gives configuration for one index.


      One index usually correspond to one dataset.'
    properties:
      index:
        allOf:
        - $ref: '#/$defs/ESIndexConfig'
        description: "This is the configuration for the main index containing the\
          \ data.\n\n    It's used to create the index in ElasticSearch, and configure\
          \ its mappings\n    (along with the *fields* config)\n    "
      fields:
        additionalProperties:
          $ref: '#/$defs/FieldConfig'
        description: 'Configuration of all fields we need to store in the index.


          Keys are field names,

          values contain the field configuration.


          This is a very important part of the configuration.


          Most of the ElasticSearch mapping will depends on it.

          ElasticSearch will also use this configuration

          to provide intended behaviour.


          (see also [Explain Configuration](./explain_configuration.md#fields))


          If you change those settings you will have to re-index all the data.

          (But you can do so in the background).'
        title: Fields
        type: object
      split_separator:
        default: ','
        description: separator to use when splitting values, for fields that have
          split=True
        title: Split Separator
        type: string
      lang_separator:
        default: _
        description: 'for `text_lang` FieldType, the separator between the name of
          the field and the language code, ex: product_name_it if lang_separator="_"'
        title: Lang Separator
        type: string
      primary_color:
        default: '#aaa'
        description: Used for vega charts. Use CSS color code.
        title: Primary Color
        type: string
      accent_color:
        default: '#222'
        description: Used for vega. Should be CSS color code.
        title: Accent Color
        type: string
      taxonomy:
        allOf:
        - $ref: '#/$defs/TaxonomyConfig'
        description: "Configuration of taxonomies,\n    that is collections of entries\
          \ with synonyms in multiple languages.\n\n    See [Explain taxonomies](../explain-taxonomies)\n\
          \n    Field may be linked to taxonomies.\n\n    It enables enriching search\
          \ with synonyms,\n    as well as providing suggestions,\n    or informative\
          \ facets.\n\n    Note: if you define taxonomies, you must import them using\n\
          \    [import-taxonomies command](../ref-python/cli.html#python3-m-app-import-taxonomies)\n\
          \    "
      supported_langs:
        description: A list of all supported languages, it is used to build index
          mapping
        examples:
        - - en
          - fr
          - it
        items:
          type: string
        title: Supported Langs
        type: array
      document_fetcher:
        description: 'The full qualified reference to the document fetcher,

          i.e. the class responsible from fetching the document.

          using the document ID present in the Redis Stream.


          It should inherit `app._import.BaseDocumentFetcher`

          and specialize the `fetch_document` method.


          To keep things sleek,

          you generally have few item fields in the event stream payload.

          This class will fetch the full document using your application API.'
        examples:
        - app.openfoodfacts.DocumentFetcher
        title: Document Fetcher
        type: string
      preprocessor:
        anyOf:
        - description: 'The full qualified reference to the preprocessor

            to use before data import.


            This class must inherit `app.indexing.BaseDocumentPreprocessor`

            and specialize the `preprocess` method.


            This is used to adapt the data schema

            or to add search-a-licious specific fields

            for example.'
          examples:
          - app.openfoodfacts.DocumentPreprocessor
          type: string
        - type: 'null'
        default: null
        title: Preprocessor
      result_processor:
        anyOf:
        - description: "The full qualified reference to the elasticsearch result processor\n\
            \                    to use after search query to Elasticsearch.\n\n)\
            \                    This class must inherit `app.postprocessing.BaseResultProcessor`\n\
            \                    and specialize the `process_after`\n\n          \
            \          This is can be used to add custom fields computed from index\
            \ content.\n                    "
          examples:
          - app.openfoodfacts.ResultProcessor
          type: string
        - type: 'null'
        default: null
        title: Result Processor
      scripts:
        anyOf:
        - additionalProperties:
            $ref: '#/$defs/ScriptConfig'
          description: 'You can add scripts that can be used for sorting results.


            Each key is a script name, with it''s configuration.'
          type: object
        - type: 'null'
        default: null
        title: Scripts
      match_phrase_boost:
        default: 2.0
        description: 'How much we boost exact matches on consecutive words


          That is, if you search "Dark Chocolate",

          it will boost entries that have the "Dark Chocolate" phrase (in the same
          field).


          It only applies to free text search.


          This only makes sense when using

          "boost_phrase" request parameters and "best match" order.


          Note: this field accept float of string,

          because using float might generate rounding problems.

          The string must represent a float.'
        title: Match Phrase Boost
        type: number
      match_phrase_boost_proximity:
        anyOf:
        - type: integer
        - type: 'null'
        default: null
        description: 'How much we allow proximity for `match_phrase_boost`.


          If unspecified we will just match word to word.

          Otherwise it will allow some gap between words matching


          This only makes sense when using

          "boost_phrase" request parameters and "best match" order.'
        title: Match Phrase Boost Proximity
      document_denylist:
        description: 'list of documents IDs to ignore.


          Use this to skip some documents at indexing time.'
        items:
          type: string
        title: Document Denylist
        type: array
        uniqueItems: true
      redis_stream_name:
        anyOf:
        - type: string
        - type: 'null'
        default: null
        description: 'Name of the Redis stream to read from when listening to document
          updates.


          If not provided, document updates won''t be listened to for this index.'
        title: Redis Stream Name
    required:
    - index
    - fields
    - taxonomy
    - supported_langs
    - document_fetcher
    title: IndexConfig
    type: object
  ScriptConfig:
    description: 'Scripts can be used to sort results of a search.


      This use ElasticSearch internal capabilities'
    properties:
      lang:
        allOf:
        - $ref: '#/$defs/ScriptType'
        default: expression
        description: The script language, as supported by Elasticsearch
      source:
        description: The source of the script
        title: Source
        type: string
      params:
        anyOf:
        - description: Params for the scripts. We need this to retrieve and validate
            parameters
          type: object
        - type: 'null'
        title: Params
      static_params:
        anyOf:
        - description: Additional params for the scripts that can't be supplied by
            the API (constants)
          type: object
        - type: 'null'
        title: Static Params
    required:
    - source
    - params
    - static_params
    title: ScriptConfig
    type: object
  ScriptType:
    enum:
    - expression
    - painless
    title: ScriptType
    type: string
  TaxonomyConfig:
    description: 'Configuration of taxonomies,

      that is collections of entries with synonyms in multiple languages.


      See [Explain taxonomies](../explain-taxonomies)


      Field may be linked to taxonomies.


      It enables enriching search with synonyms,

      as well as providing suggestions,

      or informative facets.


      Note: if you define taxonomies, you must import them using

      [import-taxonomies command](../ref-python/cli.html#python3-m-app-import-taxonomies)'
    properties:
      sources:
        description: Configurations of taxonomies that this project will use.
        items:
          $ref: '#/$defs/TaxonomySourceConfig'
        title: Sources
        type: array
      index:
        allOf:
        - $ref: '#/$defs/TaxonomyIndexConfig'
        description: "This is the configuration of\n    the ElasticSearch index storing\
          \ the taxonomies.\n\n    All taxonomies are stored within the same index.\n\
          \n    It enables functions like auto-completion, or field suggestions\n\
          \    as well as enrichment of requests with synonyms.\n    "
      preprocessor:
        anyOf:
        - description: 'The full qualified reference to the preprocessor

            to use before taxonomy entry import.


            This class must inherit `app.indexing.BaseTaxonomyPreprocessor`

            and specialize the `preprocess` method.


            This is used to adapt the taxonomy schema

            or to add specific fields for example.'
          examples:
          - app.openfoodfacts.TaxonomyPreprocessor
          type: string
        - type: 'null'
        default: null
        title: Preprocessor
    required:
    - sources
    - index
    title: TaxonomyConfig
    type: object
  TaxonomyIndexConfig:
    description: 'This is the configuration of

      the ElasticSearch index storing the taxonomies.


      All taxonomies are stored within the same index.


      It enables functions like auto-completion, or field suggestions

      as well as enrichment of requests with synonyms.'
    properties:
      name:
        description: 'Name of the index alias to use.


          Search-a-licious will create an index using this name and an import date,

          but alias will always point to the latest index.


          The alias must not already exists in your ElasticSearch instance.'
        title: Name
        type: string
      number_of_shards:
        default: 4
        description: 'Number of shards to use for the index.


          Shards are useful to distribute the load on your cluster.

          (see [index settings](https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#_static_index_settings))'
        title: Number Of Shards
        type: integer
      number_of_replicas:
        default: 1
        description: 'Number of replicas to use for the index.


          More replica means more resiliency but also more disk space and memory.


          (see [index settings](https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#_static_index_settings))'
        title: Number Of Replicas
        type: integer
    required:
    - name
    title: TaxonomyIndexConfig
    type: object
  TaxonomySourceConfig:
    description: Configuration on how to fetch a particular taxonomy.
    properties:
      name:
        description: 'Name of the taxonomy


          This is the name you will use in the configuration (and the API)

          to reference this taxonomy'
        title: Name
        type: string
      url:
        anyOf:
        - format: uri
          minLength: 1
          type: string
        - format: uri
          maxLength: 2083
          minLength: 1
          type: string
        description: "URL of the taxonomy.\n\nThe target file must be in JSON format\n\
          and follows Open Food Facts JSON taxonomy format.\n\nThis is a dict where\
          \ each key correspond to a taxonomy entry id,\nvalues are dict with following\
          \ properties:\n\n* name: contains a dict giving the name (string) for this\
          \ entry\n  in various languages (keys are language codes)\n* synonyms: contains\
          \ a dict giving a list of synonyms by language code\n* parents: contains\
          \ a list of direct parent ids (taxonomy is a directed acyclic graph)\n\n\
          Other keys correspond to properties associated to this entry (eg. wikidata\
          \ id)."
        title: Url
    required:
    - name
    - url
    title: TaxonomySourceConfig
    type: object
description: 'Search-a-licious server configuration.


  The configuration is loaded from a YAML file,

  that must satisfy this schema.


  Validations will be performed while we load it.'
properties:
  indices:
    additionalProperties:
      $ref: '#/$defs/IndexConfig'
    description: 'configuration of indices.



      A Search-a-licious instance only have one configuration file,

      but is capable of serving multiple datasets


      It provides a section for each index you want to create (corresponding to a
      dataset).


      The key is the ID of the index that can be referenced at query time.

      One index corresponds to a specific set of documents and can be queried independently.


      If you have multiple indexes, one of those index must be designed as the default
      one,

      see `default_index`.

      '
    title: Indices
    type: object
  default_index:
    description: the default index to use when no index is specified in the query
    title: Default Index
    type: string
required:
- indices
- default_index
title: JSON schema for search-a-licious configuration file
type: object
$schema: https://json-schema.org/draft/2020-12/schema
