{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/button-transparent.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element that represents a button without background for a search.\nIt sends a custom event \"click\" when clicked.\nIt exists to have already styled button for secondary actions.\nYou can modify this variable to customize the button style :\n--button-transparent-padding\n--secondary-hover-color",
          "name": "SearchaliciousButtonTransparent",
          "slots": [
            {
              "description": "This slot is for the button contents, default to \"Search\" string.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "_onClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onKeyUp",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_dispatchEvent",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-button-transparent",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousButtonTransparent",
          "declaration": {
            "name": "SearchaliciousButtonTransparent",
            "module": "src/button-transparent.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-button-transparent",
          "declaration": {
            "name": "SearchaliciousButtonTransparent",
            "module": "src/button-transparent.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/context.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "chartSideBarStateContext"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "chartSideBarStateContext",
          "declaration": {
            "name": "chartSideBarStateContext",
            "module": "src/context.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/errors.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An error thrown if we don't have a template in results component",
          "name": "MissingResultTemplateError",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'MissingResultTemplateError'"
            }
          ],
          "superclass": {
            "name": "Error",
            "module": "src/errors.ts"
          }
        },
        {
          "kind": "class",
          "description": "An error thrown if we have multiple templates in results component",
          "name": "MultipleResultTemplateError",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'MultipleResultTemplateError'"
            }
          ],
          "superclass": {
            "name": "Error",
            "module": "src/errors.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MissingResultTemplateError",
          "declaration": {
            "name": "MissingResultTemplateError",
            "module": "src/errors.ts"
          }
        },
        {
          "kind": "js",
          "name": "MultipleResultTemplateError",
          "declaration": {
            "name": "MultipleResultTemplateError",
            "module": "src/errors.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/event-listener-setup.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "EventRegistrationMixin",
          "members": [
            {
              "kind": "field",
              "name": "_event_setups",
              "type": {
                "text": "{[key: string]: Array<number>}"
              },
              "default": "{}"
            },
            {
              "kind": "method",
              "name": "addEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_registrationEventHandlersOnAnimationFrame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions | undefined"
                  }
                }
              ]
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventRegistrationMixin",
          "declaration": {
            "name": "EventRegistrationMixin",
            "module": "src/event-listener-setup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/search-a-licious.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousPanelManager",
          "declaration": {
            "name": "SearchaliciousPanelManager",
            "module": "./layouts/search-panel-manager"
          }
        },
        {
          "kind": "js",
          "name": "SearchLayoutPage",
          "declaration": {
            "name": "SearchLayoutPage",
            "module": "./layouts/search-layout-page"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousCheckbox",
          "declaration": {
            "name": "SearchaliciousCheckbox",
            "module": "./search-checkbox"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousRadio",
          "declaration": {
            "name": "SearchaliciousRadio",
            "module": "./search-radio"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousToggle",
          "declaration": {
            "name": "SearchaliciousToggle",
            "module": "./search-toggle"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousBar",
          "declaration": {
            "name": "SearchaliciousBar",
            "module": "./search-bar"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousButton",
          "declaration": {
            "name": "SearchaliciousButton",
            "module": "./search-button"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousPages",
          "declaration": {
            "name": "SearchaliciousPages",
            "module": "./search-pages"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousFacets",
          "declaration": {
            "name": "SearchaliciousFacets",
            "module": "./search-facets"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousResults",
          "declaration": {
            "name": "SearchaliciousResults",
            "module": "./search-results"
          }
        },
        {
          "kind": "js",
          "name": "SearchCount",
          "declaration": {
            "name": "SearchCount",
            "module": "./search-count"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousSortScript",
          "declaration": {
            "name": "SearchaliciousSortScript",
            "module": "./search-sort-script"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousSort",
          "declaration": {
            "name": "SearchaliciousSort",
            "module": "./search-sort"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousSortField",
          "declaration": {
            "name": "SearchaliciousSortField",
            "module": "./search-sort"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousAutocomplete",
          "declaration": {
            "name": "SearchaliciousAutocomplete",
            "module": "./search-autocomplete"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousSecondaryButton",
          "declaration": {
            "name": "SearchaliciousSecondaryButton",
            "module": "./secondary-button"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousButtonTransparent",
          "declaration": {
            "name": "SearchaliciousButtonTransparent",
            "module": "./button-transparent"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousIconCross",
          "declaration": {
            "name": "SearchaliciousIconCross",
            "module": "./icons/cross"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousDistributionChart",
          "declaration": {
            "name": "SearchaliciousDistributionChart",
            "module": "./search-chart"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousScatterChart",
          "declaration": {
            "name": "SearchaliciousScatterChart",
            "module": "./search-chart"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousIconSearch",
          "declaration": {
            "name": "SearchaliciousIconSearch",
            "module": "./icons/search"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousIconChart",
          "declaration": {
            "name": "SearchaliciousIconChart",
            "module": "./icons/chart"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousSuggestionEntry",
          "declaration": {
            "name": "SearchaliciousSuggestionEntry",
            "module": "./search-suggestion-entry"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousToggleCharts",
          "declaration": {
            "name": "SearchaliciousToggleCharts",
            "module": "./search-toggle-charts"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousResetButton",
          "declaration": {
            "name": "SearchaliciousResetButton",
            "module": "./search-reset-button"
          }
        },
        {
          "kind": "js",
          "name": "setLocale",
          "declaration": {
            "name": "setLocale",
            "module": "./localization/main"
          }
        },
        {
          "kind": "js",
          "name": "getLocale",
          "declaration": {
            "name": "getLocale",
            "module": "./localization/main"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-autocomplete.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Search autocomplete that can be used in facets to add terms that are not yet displayed (because they haven't enough elements).\nIt supports adding terms from suggested options but also terms that are not suggested.\nOptions are provided by the parent facet component that listen to `autocomplete-input` events to get input and fetch options accordingly\nAs a value is selected, an `autocomplete-submit` event is emitted so that parent facet can add the new value.",
          "name": "SearchaliciousAutocomplete",
          "slots": [
            {
              "description": "This slot is for the button contents, default to \"Search\" string.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "_renderSuggestions",
              "description": "Renders the possiblibility as list for user to select from",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "This method is used to handle the input value.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "submit",
              "parameters": [
                {
                  "name": "isSuggestion",
                  "default": "false",
                  "description": "A boolean value to check if the value is a suggestion or a free input from the user.",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "This method is used to submit the input value.\nIt is used to submit the input value after selecting an option.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputName",
              "type": {
                "text": "string"
              },
              "default": "'suggestion'",
              "attribute": "input-name",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "SuggestionSelectionOption[]"
              },
              "default": "[]",
              "description": "The options for the suggestion.\nIt is provided by the parent component.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "currentIndex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "isLoading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "getOptionIndex",
              "description": "This method is used to get the current index.\nIt remove the offset of 1 because the currentIndex is 1-based.",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "currentOption",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "getInput",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "onInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  },
                  "description": "The input event."
                }
              ],
              "description": "Handles the input event on the suggestion and dispatch custom event : \"suggestion-input\".",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "blurInput",
              "description": "This method is used to remove focus from the input element.\nIt is used to quit after selecting an option.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetInput",
              "description": "This method is used to reset the input value and blur it.\nIt is used to reset the input after a search.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleArrowKey",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "string"
                  },
                  "description": "The direction of the arrow key event."
                }
              ],
              "description": "Handles keyboard event to navigate the suggestion list",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleEnter",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "When Enter is pressed:\n  * if an option was selected (using keyboard arrows) it becomes the value\n  * otherwise the input string is the value\nWe then submit the value.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleEscape",
              "description": "This method is used to handle the escape key event.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "onKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "dispatch key events according to the key pressed (arrows or enter)",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "onClick",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "On a click on the suggestion option, we select it as value and submit it.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "onFocus",
              "description": "This method is used to handle the focus event on the input element.\nIt is used to show the suggestion options when the input is focused.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "onBlur",
              "description": "This method is used to handle the blur event on the input element.\nIt is used to hide the suggestion options when the input is blurred.\nIt is debounced to avoid to quit before select with click.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SuggestionSelectionMixin",
              "module": "/src/mixins/suggestion-selection"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-autocomplete",
          "customElement": true,
          "attributes": [
            {
              "name": "input-name",
              "type": {
                "text": "string"
              },
              "default": "'suggestion'",
              "fieldName": "inputName",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousAutocomplete",
          "declaration": {
            "name": "SearchaliciousAutocomplete",
            "module": "src/search-autocomplete.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-autocomplete",
          "declaration": {
            "name": "SearchaliciousAutocomplete",
            "module": "src/search-autocomplete.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-bar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The search bar element\n\nThis is the main component, it will enable the input of the search query\nand it also manage all the search thanks to SearchaliciousSearchMixin inheritance.",
          "name": "SearchaliciousBar",
          "members": [
            {
              "kind": "field",
              "name": "_placeholder",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private",
              "description": "Placeholder attribute is stored in a private variable to be able to use the msg() function\nit stores the placeholder attribute value if it is set"
            },
            {
              "kind": "field",
              "name": "suggestions",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Taxonomies we want to use for suggestions",
              "attribute": "suggestions"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Place holder in search bar",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "showSearchButtonText",
              "description": "Check if the search button text should be displayed"
            },
            {
              "kind": "field",
              "name": "parsedSuggestions",
              "description": "It parses the string suggestions attribute and returns an array"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Handle the input event\nIt will update the query and call the getTaxonomiesTerms method to show suggestions",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "submit",
              "parameters": [
                {
                  "name": "isSuggestion",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Submit - might either be selecting a suggestion or submitting a search expression",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSuggestions",
              "description": "Render the suggestions when the input is focused and the value is not empty"
            },
            {
              "kind": "field",
              "name": "onResetInput",
              "description": "Reset the input value, blur it and search with empty query."
            },
            {
              "kind": "method",
              "name": "onReset",
              "description": "Reset the facets filters, query and search with empty query."
            },
            {
              "kind": "field",
              "name": "setLocale",
              "default": "setLocale"
            },
            {
              "kind": "field",
              "name": "inputName",
              "type": {
                "text": "string"
              },
              "default": "'suggestion'",
              "attribute": "input-name",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "SuggestionSelectionOption[]"
              },
              "default": "[]",
              "description": "The options for the suggestion.\nIt is provided by the parent component.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "currentIndex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "isLoading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "getOptionIndex",
              "description": "This method is used to get the current index.\nIt remove the offset of 1 because the currentIndex is 1-based.",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "currentOption",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "getInput",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "onInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  },
                  "description": "The input event."
                }
              ],
              "description": "Handles the input event on the suggestion and dispatch custom event : \"suggestion-input\".",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "blurInput",
              "description": "This method is used to remove focus from the input element.\nIt is used to quit after selecting an option.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetInput",
              "description": "This method is used to reset the input value and blur it.\nIt is used to reset the input after a search.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleArrowKey",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "string"
                  },
                  "description": "The direction of the arrow key event."
                }
              ],
              "description": "Handles keyboard event to navigate the suggestion list",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleEnter",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "When Enter is pressed:\n  * if an option was selected (using keyboard arrows) it becomes the value\n  * otherwise the input string is the value\nWe then submit the value.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleEscape",
              "description": "This method is used to handle the escape key event.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "onKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "dispatch key events according to the key pressed (arrows or enter)",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "onClick",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "On a click on the suggestion option, we select it as value and submit it.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "onFocus",
              "description": "This method is used to handle the focus event on the input element.\nIt is used to show the suggestion options when the input is focused.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "method",
              "name": "onBlur",
              "description": "This method is used to handle the blur event on the input element.\nIt is used to hide the suggestion options when the input is blurred.\nIt is debounced to avoid to quit before select with click.",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "kind": "field",
              "name": "terms",
              "type": {
                "text": "TermOption[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "SearchaliciousTermsMixin",
                "module": "src/mixins/suggestions-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "isTermsLoading",
              "default": "{}",
              "inheritedFrom": {
                "name": "SearchaliciousTermsMixin",
                "module": "src/mixins/suggestions-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "taxonomiesBaseUrl",
              "type": {
                "text": "string"
              },
              "default": "'/'",
              "attribute": "base-url",
              "inheritedFrom": {
                "name": "SearchaliciousTermsMixin",
                "module": "src/mixins/suggestions-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "langs",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "Separated list of languages",
              "attribute": "langs",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "method",
              "name": "_termsUrl",
              "parameters": [
                {
                  "name": "q",
                  "type": {
                    "text": "string"
                  },
                  "description": "The query string."
                },
                {
                  "name": "taxonomyNames",
                  "type": {
                    "text": "string[]"
                  },
                  "description": "The taxonomy names."
                }
              ],
              "description": "build URL to search taxonomies terms from input",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "SearchaliciousTermsMixin",
                "module": "src/mixins/suggestions-ctl.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTaxonomiesTerms",
              "return": {
                "type": {
                  "text": "Promise<TaxomiesTermsResponse>"
                }
              },
              "parameters": [
                {
                  "name": "q",
                  "type": {
                    "text": "string"
                  },
                  "description": "The query string."
                },
                {
                  "name": "taxonomyNames",
                  "type": {
                    "text": "string[]"
                  },
                  "description": "The taxonomy names."
                }
              ],
              "description": "Method to get taxonomies terms.",
              "inheritedFrom": {
                "name": "SearchaliciousTermsMixin",
                "module": "src/mixins/suggestions-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The version of the object",
              "inheritedFrom": {
                "name": "VersioningMixin",
                "module": "src/mixins/versioning.ts"
              }
            },
            {
              "kind": "method",
              "name": "incrementVersion",
              "description": "Increment the version of the object",
              "inheritedFrom": {
                "name": "VersioningMixin",
                "module": "src/mixins/versioning.ts"
              }
            },
            {
              "kind": "method",
              "name": "isLatestVersion",
              "parameters": [
                {
                  "name": "version",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Check if the version is the latest",
              "inheritedFrom": {
                "name": "VersioningMixin",
                "module": "src/mixins/versioning.ts"
              }
            },
            {
              "kind": "field",
              "name": "query",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Query that will be sent to searchalicious",
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "default": "DEFAULT_SEARCH_NAME",
              "attribute": "name",
              "description": "The name of this search",
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseUrl",
              "type": {
                "text": "string"
              },
              "default": "'/'",
              "description": "The base api url",
              "attribute": "base-url",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "index",
              "type": {
                "text": "string | undefined"
              },
              "description": "index to query",
              "attribute": "index",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "pageSize",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "Number of result per page",
              "attribute": "page-size",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "_currentPage",
              "type": {
                "text": "number | undefined"
              },
              "description": "Number of result per page",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pageCount",
              "type": {
                "text": "number | undefined"
              },
              "description": "Last search page count",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "_results",
              "type": {
                "text": "{}[] | undefined"
              },
              "description": "Last search results for current page",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "_count",
              "type": {
                "text": "number | undefined"
              },
              "description": "Last search total number of results",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "lastQuery",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Last search query",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "lastFacetsFilters",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Last search facets filters",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "isQueryChanged",
              "description": "Check if the query has changed since the last search",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "isFacetsChanged",
              "description": "Check if the facets filters have changed since the last search",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "isSearchChanged",
              "description": "Check if the search button text should be displayed",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "canReset",
              "description": "Check if the filters can be reset\nFilters is facets filters and query",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSearchSignals",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "method",
              "name": "_facetsParentNode",
              "description": "list of facets containers",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectTermByTaxonomy",
              "parameters": [
                {
                  "name": "taxonomy",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "term",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Select a term by taxonomy in all facets\nIt will update the selected terms in facets",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sortElement",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoLaunch",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Wether search should be launched at page load",
              "attribute": "auto-launch",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "firstSearch",
              "description": "Launch search at page loaded if needed (we have a search in url)",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "_facetsNodes",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "method",
              "name": "_facets",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "description": "Get the list of facets we want to request",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "method",
              "name": "_chartParams",
              "return": {
                "type": {
                  "text": "ChartSearchParam[] | string | undefined"
                }
              },
              "parameters": [
                {
                  "name": "isGetRequest",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Get the list of charts params we want to request",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "_facetsFilters",
              "description": "Get the filter linked to facets",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetFacets",
              "parameters": [
                {
                  "name": "launchSearch",
                  "default": "true"
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "method",
              "name": "_searchUrl",
              "parameters": [
                {
                  "name": "page",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "method",
              "name": "_paramsToQueryStr",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "type": {
                    "text": "SearchParameters"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<any, any>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSearch",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "External component (like the search button)\ncan use the `searchalicious-search` event\nto trigger a search.\nIt must have the search name in it's data.",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleChangePage",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "External component (like the search pages)\ncan use the `searchalicious-change-page` event\nto ask for page change\nIt must have the search name in it's data.",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "buildParams",
              "description": "Build the params to send to the search API",
              "parameters": [
                {
                  "name": "page"
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "method",
              "name": "search",
              "parameters": [
                {
                  "name": "page",
                  "default": "1"
                }
              ],
              "description": "Launching search",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "convertHistoryParamsToValues",
              "description": "Convert the URL params to the original values\nIt will be used to set the values from the URL",
              "parameters": [
                {
                  "name": "params"
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "field",
              "name": "setValuesFromHistory",
              "description": "Set the values from the history\nIt will set the params from the URL params",
              "parameters": [
                {
                  "name": "values"
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "field",
              "name": "buildHistoryParams",
              "description": "Build the history params from the current state\nIt will be used to update the URL when searching",
              "parameters": [
                {
                  "name": "params"
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "field",
              "name": "setParamFromUrl",
              "description": "Set the values from the URL\nIt will set the values from the URL and return if a search should be launched",
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "field",
              "name": "_event_setups",
              "type": {
                "text": "{[key: string]: Array<number>}"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "_registrationEventHandlersOnAnimationFrame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "suggestions",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Taxonomies we want to use for suggestions",
              "fieldName": "suggestions"
            },
            {
              "name": "placeholder",
              "description": "Place holder in search bar",
              "fieldName": "placeholder"
            },
            {
              "name": "input-name",
              "type": {
                "text": "string"
              },
              "default": "'suggestion'",
              "fieldName": "inputName",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "SuggestionSelectionMixin",
                "module": "src/mixins/suggestion-selection.ts"
              }
            },
            {
              "name": "base-url",
              "type": {
                "text": "string"
              },
              "default": "'/'",
              "description": "The base api url",
              "fieldName": "taxonomiesBaseUrl",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "name": "langs",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "Separated list of languages",
              "fieldName": "langs",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "name": "name",
              "default": "DEFAULT_SEARCH_NAME",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "name",
              "description": "The name of this search",
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "name": "index",
              "type": {
                "text": "string | undefined"
              },
              "description": "index to query",
              "fieldName": "index",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "name": "page-size",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "Number of result per page",
              "fieldName": "pageSize",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            },
            {
              "name": "auto-launch",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Wether search should be launched at page load",
              "fieldName": "autoLaunch",
              "inheritedFrom": {
                "name": "SearchaliciousSearchMixin",
                "module": "src/mixins/search-ctl.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SuggestionSelectionMixin",
              "module": "/src/mixins/suggestion-selection"
            },
            {
              "name": "SearchaliciousTermsMixin",
              "module": "/src/mixins/suggestions-ctl"
            },
            {
              "name": "SearchaliciousSearchMixin",
              "module": "/src/mixins/search-ctl"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousBar",
          "declaration": {
            "name": "SearchaliciousBar",
            "module": "src/search-bar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-bar",
          "declaration": {
            "name": "SearchaliciousBar",
            "module": "src/search-bar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An optional search button element that launch the search.",
          "name": "SearchaliciousButton",
          "slots": [
            {
              "description": "goes in button contents, default to \"Search\" string",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "_onKeyUp",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "searchName",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "The name of the search bar this sort applies to.\n\nIt must correspond to the `name` property of the corresponding `search-bar` component.\n\nIt enable having multiple search bars on the same page.\n\nIt defaults to `searchalicious`",
              "attribute": "search-name",
              "inheritedFrom": {
                "name": "SearchActionMixin",
                "module": "src/mixins/search-action.ts"
              }
            },
            {
              "kind": "method",
              "name": "_launchSearch",
              "description": "Launches a search event.\nIt creates a new event with the search name and dispatches it.",
              "inheritedFrom": {
                "name": "SearchActionMixin",
                "module": "src/mixins/search-action.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fired when button is clicked.",
              "name": "searchalicious-search"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@lit-labs/preact-signals"
            },
            {
              "name": "SearchActionMixin",
              "module": "/src/mixins/search-action"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-button",
          "customElement": true,
          "attributes": [
            {
              "name": "search-name",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "The name of the search bar this sort applies to.\n\nIt must correspond to the `name` property of the corresponding `search-bar` component.\n\nIt enable having multiple search bars on the same page.\n\nIt defaults to `searchalicious`",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "searchName",
              "inheritedFrom": {
                "name": "SearchActionMixin",
                "module": "src/mixins/search-action.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousButton",
          "declaration": {
            "name": "SearchaliciousButton",
            "module": "src/search-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-button",
          "declaration": {
            "name": "SearchaliciousButton",
            "module": "src/search-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-chart.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Base class for chart elements",
          "name": "SearchaliciousChart",
          "members": [
            {
              "kind": "field",
              "name": "vegaRepresentation",
              "type": {
                "text": "object | undefined"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "vegaInstalled",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "getName",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "The name is used to get the right vega chart from\nAPI search Result"
            },
            {
              "kind": "method",
              "name": "getSearchParam",
              "return": {
                "type": {
                  "text": "ChartSearchParam"
                }
              },
              "parameters": [
                {
                  "name": "_isGetRequest",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Return the GET or POST param used for the API"
            },
            {
              "kind": "method",
              "name": "renderChart"
            },
            {
              "kind": "method",
              "name": "updateCharts",
              "parameters": [
                {
                  "name": "searchResultDetail",
                  "type": {
                    "text": "SearchResultDetail"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "testVegaInstalled"
            },
            {
              "kind": "field",
              "name": "searchName",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "attribute": "search-name",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetailSignal",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetail",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "_event_setups",
              "type": {
                "text": "{[key: string]: Array<number>}"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "_registrationEventHandlersOnAnimationFrame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SearchaliciousResultCtlMixin",
              "module": "/src/mixins/search-results-ctl"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "attributes": [
            {
              "name": "search-name",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "searchName",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "Distribution chart.\n\nThis will draw bars for each value of the field, reflecting the number of elements.",
          "name": "SearchaliciousDistributionChart",
          "members": [
            {
              "kind": "field",
              "name": "field",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "field"
            },
            {
              "kind": "method",
              "name": "getName",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "The name is used to get the right vega chart from\nAPI search Result",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSearchParam",
              "return": {
                "type": {
                  "text": "ChartSearchParam"
                }
              },
              "parameters": [
                {
                  "name": "isGetRequest",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Return the GET or POST param used for the API",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchName",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "attribute": "search-name",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetailSignal",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetail",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "_event_setups",
              "type": {
                "text": "{[key: string]: Array<number>}"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "_registrationEventHandlersOnAnimationFrame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "vegaRepresentation",
              "type": {
                "text": "object | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "vegaInstalled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderChart",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateCharts",
              "parameters": [
                {
                  "name": "searchResultDetail",
                  "type": {
                    "text": "SearchResultDetail"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "testVegaInstalled",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "field",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "field"
            },
            {
              "name": "search-name",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "searchName",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            }
          ],
          "superclass": {
            "name": "SearchaliciousChart",
            "module": "src/search-chart.ts"
          },
          "tagName": "searchalicious-distribution-chart",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Scatter plot chart.\n\nThis will plot a point to each element at the corresponding coordinates,\ngiving a sense of the distribution of the data.",
          "name": "SearchaliciousScatterChart",
          "members": [
            {
              "kind": "field",
              "name": "x",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "x"
            },
            {
              "kind": "field",
              "name": "y",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "y"
            },
            {
              "kind": "method",
              "name": "getName",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "The name is used to get the right vega chart from\nAPI search Result",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSearchParam",
              "return": {
                "type": {
                  "text": "ChartSearchParam"
                }
              },
              "parameters": [
                {
                  "name": "isGetRequest",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Return the GET or POST param used for the API",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchName",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "attribute": "search-name",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetailSignal",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetail",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "_event_setups",
              "type": {
                "text": "{[key: string]: Array<number>}"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "_registrationEventHandlersOnAnimationFrame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "vegaRepresentation",
              "type": {
                "text": "object | undefined"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "vegaInstalled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderChart",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateCharts",
              "parameters": [
                {
                  "name": "searchResultDetail",
                  "type": {
                    "text": "SearchResultDetail"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "testVegaInstalled",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "x",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "x"
            },
            {
              "name": "y",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "y"
            },
            {
              "name": "search-name",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "searchName",
              "inheritedFrom": {
                "name": "SearchaliciousChart",
                "module": "src/search-chart.ts"
              }
            }
          ],
          "superclass": {
            "name": "SearchaliciousChart",
            "module": "src/search-chart.ts"
          },
          "tagName": "searchalicious-scatter-chart",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousChart",
          "declaration": {
            "name": "SearchaliciousChart",
            "module": "src/search-chart.ts"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousDistributionChart",
          "declaration": {
            "name": "SearchaliciousDistributionChart",
            "module": "src/search-chart.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-distribution-chart",
          "declaration": {
            "name": "SearchaliciousDistributionChart",
            "module": "src/search-chart.ts"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousScatterChart",
          "declaration": {
            "name": "SearchaliciousScatterChart",
            "module": "src/search-chart.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-scatter-chart",
          "declaration": {
            "name": "SearchaliciousScatterChart",
            "module": "src/search-chart.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element that represents a checkbox.\n\nThis component is useful to have state of variable reflected back in the checkbox,\noverriding updated method.",
          "name": "SearchaliciousCheckbox",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Represents the checked state of the input.",
              "attribute": "checked",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the name of the input.",
              "attribute": "name",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the label of the input.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "getInputElement",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchChangeEvent",
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "refreshInput",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "_changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The change event."
                }
              ],
              "description": "Handles the change event on the radio.",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "CheckedInputMixin",
              "module": "/src/mixins/checked-input"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-checkbox",
          "customElement": true,
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Represents the checked state of the input.",
              "fieldName": "checked",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the name of the input.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the label of the input.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousCheckbox",
          "declaration": {
            "name": "SearchaliciousCheckbox",
            "module": "src/search-checkbox.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-checkbox",
          "declaration": {
            "name": "SearchaliciousCheckbox",
            "module": "src/search-checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-count.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SearchCount",
          "members": [
            {
              "kind": "field",
              "name": "displayTime",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "display-time"
            },
            {
              "kind": "field",
              "name": "beforeSearch",
              "default": "html``"
            },
            {
              "kind": "field",
              "name": "noResults"
            },
            {
              "kind": "method",
              "name": "renderResultsFound"
            },
            {
              "kind": "field",
              "name": "searchName",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "attribute": "search-name",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetailSignal",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetail",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "_event_setups",
              "type": {
                "text": "{[key: string]: Array<number>}"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "_registrationEventHandlersOnAnimationFrame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "display-time",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "displayTime"
            },
            {
              "name": "search-name",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "searchName",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SearchaliciousResultCtlMixin",
              "module": "/src/mixins/search-results-ctl"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-count",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchCount",
          "declaration": {
            "name": "SearchCount",
            "module": "src/search-count.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-count",
          "declaration": {
            "name": "SearchCount",
            "module": "src/search-count.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-facets.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Parent Component to display a side search filter (aka facets).\n\nIt must contains a SearchaliciousFacet component for each facet we want to display.",
          "name": "SearchaliciousFacets",
          "members": [
            {
              "kind": "field",
              "name": "facets",
              "type": {
                "text": "FacetsInfos | undefined"
              }
            },
            {
              "kind": "field",
              "name": "slotNodes",
              "type": {
                "text": "Array<Node>"
              }
            },
            {
              "kind": "method",
              "name": "_facetNodes",
              "return": {
                "type": {
                  "text": "SearchaliciousFacet[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "setSelectedTermsByFacet",
              "parameters": [
                {
                  "name": "selectedTermsByFacet",
                  "type": {
                    "text": "Record<string, string[]>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getFacetNodeByTaxonomy",
              "return": {
                "type": {
                  "text": "SearchaliciousFacet | undefined"
                }
              },
              "parameters": [
                {
                  "name": "taxonomy",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Get a facet node by its taxonomy\nIt will return undefined if the taxonomy is not found"
            },
            {
              "kind": "method",
              "name": "selectTermByTaxonomy",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "taxonomy",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "term",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Select a term by its taxonomy and term name\nIt will return false if the taxonomy is not found"
            },
            {
              "kind": "method",
              "name": "getFacetsNames",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "description": "Names of facets we need to query,\nthis is the names of contained facetNodes.\n\nThis is used by search-ctl to build the query"
            },
            {
              "kind": "method",
              "name": "getSearchFilters",
              "return": {
                "type": {
                  "text": "string[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "setSelectedTerms",
              "parameters": [
                {
                  "name": "terms",
                  "type": {
                    "text": "string[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateFacets",
              "parameters": [
                {
                  "name": "newFacets",
                  "type": {
                    "text": "FacetsInfos"
                  }
                }
              ],
              "description": "Update facets"
            },
            {
              "kind": "field",
              "name": "reset"
            },
            {
              "kind": "field",
              "name": "searchName",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "attribute": "search-name",
              "inheritedFrom": {
                "name": "SearchActionMixin",
                "module": "src/mixins/search-action.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetailSignal",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetail",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "_event_setups",
              "type": {
                "text": "{[key: string]: Array<number>}"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "_registrationEventHandlersOnAnimationFrame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "_launchSearch",
              "description": "Launches a search event.\nIt creates a new event with the search name and dispatches it.",
              "inheritedFrom": {
                "name": "SearchActionMixin",
                "module": "src/mixins/search-action.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SearchaliciousResultCtlMixin",
              "module": "/src/mixins/search-results-ctl"
            },
            {
              "name": "SearchActionMixin",
              "module": "/src/mixins/search-action"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-facets",
          "customElement": true,
          "attributes": [
            {
              "name": "search-name",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "searchName",
              "inheritedFrom": {
                "name": "SearchActionMixin",
                "module": "src/mixins/search-action.ts"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "Base Component to display a side search filter (aka facets)\n\nThis is a base class, implementations are specific based on facet type",
          "name": "SearchaliciousFacet",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the facet we display",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "infos",
              "type": {
                "text": "FacetInfo | undefined"
              }
            },
            {
              "kind": "field",
              "name": "taxonomy",
              "type": {
                "text": "string"
              },
              "description": "Get the name of the taxonomy from the facet name"
            },
            {
              "kind": "method",
              "name": "setTermSelected",
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderFacet"
            },
            {
              "kind": "method",
              "name": "searchFilter",
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              }
            },
            {
              "kind": "field",
              "name": "reset"
            },
            {
              "kind": "method",
              "name": "setSelectedTerms",
              "parameters": [
                {
                  "name": "terms",
                  "type": {
                    "text": "string[]"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the facet we display",
              "fieldName": "name"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        },
        {
          "kind": "class",
          "description": "This is a \"terms\" facet, this must be within a searchalicious-facets element",
          "name": "SearchaliciousTermsFacet",
          "members": [
            {
              "kind": "field",
              "name": "selectedTerms",
              "type": {
                "text": "PresenceInfo"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "autocompleteTerms",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "showOther",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "show-other"
            },
            {
              "kind": "field",
              "name": "_launchSearchWithDebounce"
            },
            {
              "kind": "method",
              "name": "setTermSelected",
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Set wether a term is selected or not",
              "inheritedFrom": {
                "name": "SearchaliciousFacet",
                "module": "src/search-facets.ts"
              }
            },
            {
              "kind": "method",
              "name": "addTerm",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSelectedTerms",
              "parameters": [
                {
                  "name": "terms",
                  "optional": true,
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Set the selected terms from an array of terms\nThis is used to restore the state of the facet",
              "inheritedFrom": {
                "name": "SearchaliciousFacet",
                "module": "src/search-facets.ts"
              }
            },
            {
              "kind": "method",
              "name": "searchFilter",
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              },
              "description": "Create the search term based upon the selected terms",
              "inheritedFrom": {
                "name": "SearchaliciousFacet",
                "module": "src/search-facets.ts"
              }
            },
            {
              "kind": "method",
              "name": "onInputAddTerm",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                },
                {
                  "name": "taxonomy",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Handle the autocomplete-input event on the add term input\nget the terms for the taxonomy"
            },
            {
              "kind": "method",
              "name": "renderAddTerm",
              "description": "Renders the add term input when showOther is true"
            },
            {
              "kind": "method",
              "name": "onCheckboxChange",
              "parameters": [
                {
                  "name": "{detail}",
                  "type": {
                    "text": "{detail: {checked: boolean; name: string}}"
                  }
                },
                {
                  "name": "detail"
                }
              ],
              "description": "Handle the checkbox change event\nIt will select or unselect term"
            },
            {
              "kind": "method",
              "name": "renderTerm",
              "parameters": [
                {
                  "name": "term",
                  "type": {
                    "text": "FacetTerm"
                  }
                }
              ],
              "description": "Renders a single term"
            },
            {
              "kind": "field",
              "name": "reset",
              "description": "Reset the selected terms and launch a search",
              "parameters": [
                {
                  "name": "search"
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousFacet",
                "module": "src/search-facets.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderFacet",
              "description": "Renders the facet content",
              "inheritedFrom": {
                "name": "SearchaliciousFacet",
                "module": "src/search-facets.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchName",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "The name of the search bar this sort applies to.\n\nIt must correspond to the `name` property of the corresponding `search-bar` component.\n\nIt enable having multiple search bars on the same page.\n\nIt defaults to `searchalicious`",
              "attribute": "search-name",
              "inheritedFrom": {
                "name": "SearchActionMixin",
                "module": "src/mixins/search-action.ts"
              }
            },
            {
              "kind": "method",
              "name": "_launchSearch",
              "description": "Launches a search event.\nIt creates a new event with the search name and dispatches it.",
              "inheritedFrom": {
                "name": "SearchActionMixin",
                "module": "src/mixins/search-action.ts"
              }
            },
            {
              "kind": "field",
              "name": "terms",
              "type": {
                "text": "TermOption[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "SearchaliciousTermsMixin",
                "module": "src/mixins/suggestions-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "isTermsLoading",
              "default": "{}",
              "inheritedFrom": {
                "name": "SearchaliciousTermsMixin",
                "module": "src/mixins/suggestions-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "taxonomiesBaseUrl",
              "type": {
                "text": "string"
              },
              "default": "'/'",
              "attribute": "base-url",
              "inheritedFrom": {
                "name": "SearchaliciousTermsMixin",
                "module": "src/mixins/suggestions-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "langs",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "attribute": "langs",
              "inheritedFrom": {
                "name": "SearchaliciousTermsMixin",
                "module": "src/mixins/suggestions-ctl.ts"
              }
            },
            {
              "kind": "method",
              "name": "_termsUrl",
              "parameters": [
                {
                  "name": "q",
                  "type": {
                    "text": "string"
                  },
                  "description": "The query string."
                },
                {
                  "name": "taxonomyNames",
                  "type": {
                    "text": "string[]"
                  },
                  "description": "The taxonomy names."
                }
              ],
              "description": "build URL to search taxonomies terms from input",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "SearchaliciousTermsMixin",
                "module": "src/mixins/suggestions-ctl.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTaxonomiesTerms",
              "return": {
                "type": {
                  "text": "Promise<TaxomiesTermsResponse>"
                }
              },
              "parameters": [
                {
                  "name": "q",
                  "type": {
                    "text": "string"
                  },
                  "description": "The query string."
                },
                {
                  "name": "taxonomyNames",
                  "type": {
                    "text": "string[]"
                  },
                  "description": "The taxonomy names."
                }
              ],
              "description": "Method to get taxonomies terms.",
              "inheritedFrom": {
                "name": "SearchaliciousTermsMixin",
                "module": "src/mixins/suggestions-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The version of the object",
              "inheritedFrom": {
                "name": "VersioningMixin",
                "module": "src/mixins/versioning.ts"
              }
            },
            {
              "kind": "method",
              "name": "incrementVersion",
              "description": "Increment the version of the object",
              "inheritedFrom": {
                "name": "VersioningMixin",
                "module": "src/mixins/versioning.ts"
              }
            },
            {
              "kind": "method",
              "name": "isLatestVersion",
              "parameters": [
                {
                  "name": "version",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Check if the version is the latest",
              "inheritedFrom": {
                "name": "VersioningMixin",
                "module": "src/mixins/versioning.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the facet we display",
              "attribute": "name",
              "inheritedFrom": {
                "name": "SearchaliciousFacet",
                "module": "src/search-facets.ts"
              }
            },
            {
              "kind": "field",
              "name": "infos",
              "type": {
                "text": "FacetInfo | undefined"
              },
              "inheritedFrom": {
                "name": "SearchaliciousFacet",
                "module": "src/search-facets.ts"
              }
            },
            {
              "kind": "field",
              "name": "taxonomy",
              "type": {
                "text": "string"
              },
              "description": "Get the name of the taxonomy from the facet name",
              "inheritedFrom": {
                "name": "SearchaliciousFacet",
                "module": "src/search-facets.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "Fired automatically when the user use the autocomplete to select a term (see `autocomplete-terms` property).",
              "name": "searchalicious-search"
            }
          ],
          "attributes": [
            {
              "name": "show-other",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "showOther"
            },
            {
              "name": "search-name",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "The name of the search bar this sort applies to.\n\nIt must correspond to the `name` property of the corresponding `search-bar` component.\n\nIt enable having multiple search bars on the same page.\n\nIt defaults to `searchalicious`",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "searchName",
              "inheritedFrom": {
                "name": "SearchActionMixin",
                "module": "src/mixins/search-action.ts"
              }
            },
            {
              "name": "base-url",
              "type": {
                "text": "string"
              },
              "default": "'/'",
              "fieldName": "taxonomiesBaseUrl",
              "inheritedFrom": {
                "name": "SearchaliciousTermsMixin",
                "module": "src/mixins/suggestions-ctl.ts"
              }
            },
            {
              "name": "langs",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "fieldName": "langs",
              "inheritedFrom": {
                "name": "SearchaliciousTermsMixin",
                "module": "src/mixins/suggestions-ctl.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the facet we display",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "SearchaliciousFacet",
                "module": "src/search-facets.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SearchActionMixin",
              "module": "/src/mixins/search-action"
            },
            {
              "name": "SearchaliciousTermsMixin",
              "module": "/src/mixins/suggestions-ctl"
            },
            {
              "name": "DebounceMixin",
              "module": "/src/mixins/debounce"
            }
          ],
          "superclass": {
            "name": "SearchaliciousFacet",
            "module": "src/search-facets.ts"
          },
          "tagName": "searchalicious-facet-terms",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousFacets",
          "declaration": {
            "name": "SearchaliciousFacets",
            "module": "src/search-facets.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-facets",
          "declaration": {
            "name": "SearchaliciousFacets",
            "module": "src/search-facets.ts"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousFacet",
          "declaration": {
            "name": "SearchaliciousFacet",
            "module": "src/search-facets.ts"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousTermsFacet",
          "declaration": {
            "name": "SearchaliciousTermsFacet",
            "module": "src/search-facets.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-facet-terms",
          "declaration": {
            "name": "SearchaliciousTermsFacet",
            "module": "src/search-facets.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-pages.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A component to display pagination for search results.",
          "name": "SearchaliciousPages",
          "members": [
            {
              "kind": "field",
              "name": "displayFirst",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Wether or not we should add the jump to first shortcuts",
              "attribute": "display-first"
            },
            {
              "kind": "field",
              "name": "displayLast",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Wether or not we should add the jump to end shortcuts",
              "attribute": "display-last"
            },
            {
              "kind": "field",
              "name": "displayedPages",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "How many pages should we display as clickable links / buttons",
              "attribute": "displayed-pages"
            },
            {
              "kind": "field",
              "name": "_startRange",
              "type": {
                "text": "number | undefined"
              },
              "description": "the first page to be displayed as a number"
            },
            {
              "kind": "field",
              "name": "_endRange",
              "type": {
                "text": "number | undefined"
              },
              "description": "the last page to be displayed as a number"
            },
            {
              "kind": "field",
              "name": "noResults",
              "default": "html``",
              "description": "HTML to display when there are no results\n\nCan be overridden by a \"no-results\" slot"
            },
            {
              "kind": "field",
              "name": "beforeSearch",
              "default": "html``",
              "description": "HTML to display before anysearch is launched\n\nCan be overridden by a \"before-search\" slot"
            },
            {
              "kind": "method",
              "name": "handleResults",
              "parameters": [
                {
                  "name": "searchResultDetail",
                  "type": {
                    "text": "SearchResultDetail"
                  }
                }
              ],
              "description": "Update state on search received"
            },
            {
              "kind": "method",
              "name": "_computeRange",
              "parameters": [
                {
                  "name": "currentPage",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "pageCount",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "compute startRange and endRange"
            },
            {
              "kind": "field",
              "name": "_isFirstPage"
            },
            {
              "kind": "field",
              "name": "_isLastPage"
            },
            {
              "kind": "field",
              "name": "_hasStartEllipsis"
            },
            {
              "kind": "field",
              "name": "_hasEndEllipsis"
            },
            {
              "kind": "field",
              "name": "_displayPages"
            },
            {
              "kind": "method",
              "name": "renderPagination",
              "description": "Render the pagination widget (when we have pages)"
            },
            {
              "kind": "method",
              "name": "_firstPage"
            },
            {
              "kind": "method",
              "name": "_lastPage"
            },
            {
              "kind": "method",
              "name": "_prevPage"
            },
            {
              "kind": "method",
              "name": "_nextPage"
            },
            {
              "kind": "method",
              "name": "_askPageChange",
              "parameters": [
                {
                  "name": "page",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Request a page change"
            },
            {
              "kind": "field",
              "name": "searchName",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "attribute": "search-name",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetailSignal",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetail",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "_event_setups",
              "type": {
                "text": "{[key: string]: Array<number>}"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "_registrationEventHandlersOnAnimationFrame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "display-first",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Wether or not we should add the jump to first shortcuts",
              "fieldName": "displayFirst"
            },
            {
              "name": "display-last",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Wether or not we should add the jump to end shortcuts",
              "fieldName": "displayLast"
            },
            {
              "name": "displayed-pages",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "How many pages should we display as clickable links / buttons",
              "fieldName": "displayedPages"
            },
            {
              "name": "search-name",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "searchName",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SearchaliciousResultCtlMixin",
              "module": "/src/mixins/search-results-ctl"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-pages",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousPages",
          "declaration": {
            "name": "SearchaliciousPages",
            "module": "src/search-pages.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-pages",
          "declaration": {
            "name": "SearchaliciousPages",
            "module": "src/search-pages.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element that represents a radio.\n\nThis component is useful to have state of variable reflected back in the radio,\noverriding updated method.",
          "name": "SearchaliciousRadio",
          "members": [
            {
              "kind": "field",
              "name": "canBeUnchecked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows or disallows the radio to be unchecked.",
              "attribute": "can-be-unchecked"
            },
            {
              "kind": "field",
              "name": "inputId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the id of the input.",
              "attribute": "inputId"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "description": "Allows for the radio to be unchecked.",
              "parameters": [
                {
                  "description": "The event object.",
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Represents the checked state of the input.",
              "attribute": "checked",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the name of the input.",
              "attribute": "name",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the label of the input.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "getInputElement",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchChangeEvent",
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "refreshInput",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "_changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The change event."
                }
              ],
              "description": "Handles the change event on the radio.",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "can-be-unchecked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows or disallows the radio to be unchecked.",
              "fieldName": "canBeUnchecked"
            },
            {
              "name": "inputId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the id of the input.",
              "fieldName": "inputId"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Represents the checked state of the input.",
              "fieldName": "checked",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the name of the input.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the label of the input.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "CheckedInputMixin",
              "module": "/src/mixins/checked-input"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-radio",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousRadio",
          "declaration": {
            "name": "SearchaliciousRadio",
            "module": "src/search-radio.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-radio",
          "declaration": {
            "name": "SearchaliciousRadio",
            "module": "src/search-radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-reset-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "It is a transparent button that is used to reset the search.\nIt use the signal canResetSearch to know if it should be displayed.",
          "name": "SearchaliciousResetButton",
          "members": [
            {
              "kind": "field",
              "name": "searchName",
              "default": "DEFAULT_SEARCH_NAME",
              "attribute": "search-name"
            },
            {
              "kind": "method",
              "name": "dispatchResetSearchEvent"
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "search-name",
              "default": "DEFAULT_SEARCH_NAME",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "searchName"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@lit-labs/preact-signals"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-reset-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousResetButton",
          "declaration": {
            "name": "SearchaliciousResetButton",
            "module": "src/search-reset-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-reset-button",
          "declaration": {
            "name": "SearchaliciousResetButton",
            "module": "src/search-reset-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-results.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The search results element\n\nIt will display results based upon the slot with name `result`,\nconsidered as a template, with variable interpolation (using tag-params library).\n\nIt reacts to the `searchalicious-result` event fired by the search controller.",
          "name": "SearchaliciousResults",
          "members": [
            {
              "kind": "field",
              "name": "results",
              "type": {
                "text": "Record<string, any>[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "resultId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "result-id"
            },
            {
              "kind": "field",
              "name": "loadingCardSize",
              "type": {
                "text": "number"
              },
              "default": "200",
              "attribute": "loadind-card-size"
            },
            {
              "kind": "field",
              "name": "parentWidth",
              "description": "The parent width, used to compute the number of loading cards to display"
            },
            {
              "kind": "field",
              "name": "resultRenderer",
              "default": "function (html: htmlType, result: Object, index: number) {\n    const data = html`Please provide a template`;\n    if (!result && !index) {\n      // just to make TS happy that we use the variables\n      // eslint-disable-next-line no-empty\n    }\n    return data;\n  }",
              "description": "A function rendering a single result. We define this just to get it's prototype right.\n\nIt will be replaced by a dynamic function created\nfrom the content of the slot named result.\n\nNote that we need to pass along html, because at rendering time, it will not be available as a global"
            },
            {
              "kind": "field",
              "name": "noResults",
              "description": "HTML to display when there are no results\n\nCan be overridden by a \"no-results\" slot"
            },
            {
              "kind": "field",
              "name": "beforeSearch",
              "default": "html``",
              "description": "HTML to display before anysearch is launched\n\nCan be overridden by a \"before-search\" slot"
            },
            {
              "kind": "method",
              "name": "_buildResultRenderer",
              "description": "Build a result renderer from the template provided by user.\nIt creates dynamically a function that renders the template with the given result and index.\nThis is the best way I could find !\nIt is faster as using eval as the function is built only once at component creation time.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_getTemplate",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Get the template for one result, using `<slot name=\"<name>\">`\nThis must be run before shadowRoot is constructed ! (to be able to grab this.innerHTML)"
            },
            {
              "kind": "method",
              "name": "renderLoading",
              "description": "Render the loading cards\nWe display 2 columns of loading cards"
            },
            {
              "kind": "method",
              "name": "renderResults"
            },
            {
              "kind": "field",
              "name": "searchName",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "attribute": "search-name",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetailSignal",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetail",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "_event_setups",
              "type": {
                "text": "{[key: string]: Array<number>}"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "_registrationEventHandlersOnAnimationFrame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "result-id",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "resultId"
            },
            {
              "name": "loadind-card-size",
              "type": {
                "text": "number"
              },
              "default": "200",
              "fieldName": "loadingCardSize"
            },
            {
              "name": "search-name",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "searchName",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@lit-labs/preact-signals"
            },
            {
              "name": "SearchaliciousResultCtlMixin",
              "module": "/src/mixins/search-results-ctl"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-results",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousResults",
          "declaration": {
            "name": "SearchaliciousResults",
            "module": "src/search-results.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-results",
          "declaration": {
            "name": "SearchaliciousResults",
            "module": "src/search-results.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-sort-script.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A component to add a specific sort option which is based upon a script\n\nSee [How to use scripts](./how-to-use-scripts) for an introduction",
          "name": "SearchaliciousSortScript",
          "cssProperties": [
            {
              "description": "--sort-options-color - The text color of the sort options.",
              "name": ""
            },
            {
              "description": "--sort-options-hover-background-color - The background color of the sort options when hovered.",
              "name": ""
            }
          ],
          "cssParts": [
            {
              "description": "the text before the selected option",
              "name": "selected-marker"
            },
            {
              "description": "the sort option itself, when not selected",
              "name": "sort-option"
            },
            {
              "description": "the sort option itself, when selected",
              "name": "sort-option-selected"
            }
          ],
          "slots": [
            {
              "description": "the content is rendered as is. This is the line displayed for the user to choose from sort options",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "script",
              "type": {
                "text": "string | undefined"
              },
              "description": "Name of the script to use for the sorting.\n\nThis script must be registered in your backend configuration file.",
              "attribute": "script"
            },
            {
              "kind": "field",
              "name": "parameters",
              "type": {
                "text": "string"
              },
              "default": "'{}'",
              "description": "The parameters to pass to the scripts.\n\nIf the script requires no parameters, this can be an empty Object `'{}'`\n\nIt can be either:\n- a JSON string containing parameters\n- a local storage key, with prefix `local:`.\n  In this case, the value of the key must be a JSON string.",
              "attribute": "parameters"
            },
            {
              "kind": "method",
              "name": "getDefaultId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create a sensible default id for this sort option",
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            },
            {
              "kind": "method",
              "name": "getScriptParameters",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Get the sort parameters according to parameters"
            },
            {
              "kind": "method",
              "name": "getSortParameters",
              "return": {
                "type": {
                  "text": "SortParameters"
                }
              },
              "description": "Properties to add to query to be able to sort on this specific script",
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            },
            {
              "description": "by default the id is based upon the script name. If you have more than one element with the same value for the `script` attribute, you must provide an id.",
              "name": "id",
              "kind": "field"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the value is selected.\nOnly one value should be selected at once in a sort component.",
              "attribute": "selected",
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedMarker",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A text or symbol to display in front of the currently selected option",
              "attribute": "selectedMarker",
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fired when the sort option is selected.",
              "name": "searchalicious-sort-option-selected",
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "script",
              "type": {
                "text": "string | undefined"
              },
              "description": "Name of the script to use for the sorting.\n\nThis script must be registered in your backend configuration file.",
              "fieldName": "script"
            },
            {
              "name": "parameters",
              "type": {
                "text": "string"
              },
              "default": "'{}'",
              "description": "The parameters to pass to the scripts.\n\nIf the script requires no parameters, this can be an empty Object `'{}'`\n\nIt can be either:\n- a JSON string containing parameters\n- a local storage key, with prefix `local:`.\n  In this case, the value of the key must be a JSON string.",
              "fieldName": "parameters"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the value is selected.\nOnly one value should be selected at once in a sort component.",
              "fieldName": "selected",
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            },
            {
              "name": "selectedMarker",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A text or symbol to display in front of the currently selected option",
              "fieldName": "selectedMarker",
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            }
          ],
          "superclass": {
            "name": "SearchaliciousSortOption",
            "module": "/src/search-sort"
          },
          "tagName": "searchalicious-sort-script",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousSortScript",
          "declaration": {
            "name": "SearchaliciousSortScript",
            "module": "src/search-sort-script.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-sort-script",
          "declaration": {
            "name": "SearchaliciousSortScript",
            "module": "src/search-sort-script.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-sort.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A component to enable user to choose a search order.\n\nIt must contains searchalicious-sort-options",
          "name": "SearchaliciousSort",
          "cssProperties": [
            {
              "description": "The background color of the options.t",
              "name": "--sort-options-background-color"
            }
          ],
          "slots": [
            {
              "description": "rendered on the button",
              "name": "label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "autoRefresh",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Wether to relaunch search on sort change",
              "attribute": "auto-refresh"
            },
            {
              "kind": "field",
              "name": "selectedMarker",
              "type": {
                "text": "string"
              },
              "default": "'▶'",
              "description": "Marker of selected items",
              "attribute": "selected-marker"
            },
            {
              "kind": "field",
              "name": "showOptions",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "sortOptions",
              "description": "return sort options elements"
            },
            {
              "kind": "method",
              "name": "currentSortOption",
              "description": "Sort option currently selected"
            },
            {
              "kind": "method",
              "name": "setSortOption",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SearchaliciousSortOption"
                  }
                }
              ],
              "description": "Set selected sort option"
            },
            {
              "kind": "method",
              "name": "getSortOptionId"
            },
            {
              "kind": "method",
              "name": "setSortOptionById",
              "parameters": [
                {
                  "name": "optionId",
                  "type": {
                    "text": "string | undefined"
                  }
                }
              ],
              "description": "set selected sort option by using it's id.\n\nIf optionId is undefined, unselect all"
            },
            {
              "kind": "method",
              "name": "assignSelectedMarker",
              "description": "Duplicate our selected marker to all children sort options that did not have it yet"
            },
            {
              "kind": "method",
              "name": "getSortParameters",
              "return": {
                "type": {
                  "text": "SortParameters | null"
                }
              },
              "description": "Get sort parameters of selected option or return an empty Object"
            },
            {
              "kind": "method",
              "name": "_renderOptions",
              "description": "sub part to render options when we show them"
            },
            {
              "kind": "method",
              "name": "_onClick",
              "description": "Show or hide option as we click on the button"
            },
            {
              "kind": "method",
              "name": "_handleSelected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "React to a sort option being selected\n* set currently selected\n* hide options\n* eventually launch search"
            },
            {
              "kind": "field",
              "name": "searchName",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "The name of the search bar this sort applies to.\n\nIt must correspond to the `name` property of the corresponding `search-bar` component.\n\nIt enable having multiple search bars on the same page.\n\nIt defaults to `searchalicious`",
              "attribute": "search-name",
              "inheritedFrom": {
                "name": "SearchActionMixin",
                "module": "src/mixins/search-action.ts"
              }
            },
            {
              "kind": "method",
              "name": "_launchSearch",
              "description": "Launches a search event.\nIt creates a new event with the search name and dispatches it.",
              "inheritedFrom": {
                "name": "SearchActionMixin",
                "module": "src/mixins/search-action.ts"
              }
            },
            {
              "kind": "field",
              "name": "_event_setups",
              "type": {
                "text": "{[key: string]: Array<number>}"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "_registrationEventHandlersOnAnimationFrame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fired as soon as a new option is chosen by the user, to launch the search.",
              "name": "searchalicious-search"
            }
          ],
          "attributes": [
            {
              "name": "auto-refresh",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Wether to relaunch search on sort change",
              "fieldName": "autoRefresh"
            },
            {
              "name": "selected-marker",
              "type": {
                "text": "string"
              },
              "default": "'▶'",
              "description": "Marker of selected items",
              "fieldName": "selectedMarker"
            },
            {
              "name": "search-name",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "The name of the search bar this sort applies to.\n\nIt must correspond to the `name` property of the corresponding `search-bar` component.\n\nIt enable having multiple search bars on the same page.\n\nIt defaults to `searchalicious`",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "searchName",
              "inheritedFrom": {
                "name": "SearchActionMixin",
                "module": "src/mixins/search-action.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SearchActionMixin",
              "module": "/src/mixins/search-action"
            },
            {
              "name": "EventRegistrationMixin",
              "module": "/src/event-listener-setup"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-sort",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "A sort option component, this is a base class",
          "name": "SearchaliciousSortOption",
          "cssProperties": [
            {
              "description": "--sort-options-color - The text color of the sort options.",
              "name": ""
            },
            {
              "description": "--sort-options-hover-background-color - The background color of the sort options when hovered.",
              "name": ""
            }
          ],
          "cssParts": [
            {
              "description": "the text before the selected option",
              "name": "selected-marker"
            },
            {
              "description": "the sort option itself, when not selected",
              "name": "sort-option"
            },
            {
              "description": "the sort option itself, when selected",
              "name": "sort-option-selected"
            }
          ],
          "slots": [
            {
              "description": "the content is rendered as is and is considered the content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the value is selected.\nOnly one value should be selected at once in a sort component.",
              "attribute": "selected"
            },
            {
              "kind": "field",
              "name": "selectedMarker",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A text or symbol to display in front of the currently selected option",
              "attribute": "selectedMarker"
            },
            {
              "kind": "method",
              "name": "getDefaultId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create a sensible default id for this sort option"
            },
            {
              "kind": "method",
              "name": "getSortParameters",
              "return": {
                "type": {
                  "text": "SortParameters"
                }
              },
              "description": "This is the method that should return the sort paratemetrs"
            },
            {
              "kind": "method",
              "name": "_onClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "Fired when the sort option is selected.",
              "name": "searchalicious-sort-option-selected"
            }
          ],
          "attributes": [
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the value is selected.\nOnly one value should be selected at once in a sort component.",
              "fieldName": "selected"
            },
            {
              "name": "selectedMarker",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A text or symbol to display in front of the currently selected option",
              "fieldName": "selectedMarker"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        },
        {
          "kind": "class",
          "description": "`searchalicious-sort-field` is a sort option that sorts on a field.\n\nIt must be used inside a `searchalicious-sort` component.",
          "name": "SearchaliciousSortField",
          "cssProperties": [
            {
              "description": "--sort-options-color - The text color of the sort options.",
              "name": ""
            },
            {
              "description": "--sort-options-hover-background-color - The background color of the sort options when hovered.",
              "name": ""
            }
          ],
          "cssParts": [
            {
              "description": "the text before the selected option",
              "name": "selected-marker"
            },
            {
              "description": "the sort option itself, when not selected",
              "name": "sort-option"
            },
            {
              "description": "the sort option itself, when selected",
              "name": "sort-option-selected"
            }
          ],
          "slots": [
            {
              "description": "the content is rendered as is. This is the line displayed for the user to choose from sort options",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "field",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The field name we want to sort on. It must be a sortable field.\n\nIf you want to sort on the field in reverse order, use a minus sign in front of the field name.",
              "attribute": "field"
            },
            {
              "kind": "method",
              "name": "getDefaultId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "id defaults to field-<field-name>",
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSortParameters",
              "return": {
                "type": {
                  "text": "SortParameters"
                }
              },
              "description": "This is the method that should return the sort paratemetrs",
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the value is selected.\nOnly one value should be selected at once in a sort component.",
              "attribute": "selected",
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedMarker",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A text or symbol to display in front of the currently selected option",
              "attribute": "selectedMarker",
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fired when the sort option is selected.",
              "name": "searchalicious-sort-option-selected",
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "field",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The field name we want to sort on. It must be a sortable field.\n\nIf you want to sort on the field in reverse order, use a minus sign in front of the field name.",
              "fieldName": "field"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the value is selected.\nOnly one value should be selected at once in a sort component.",
              "fieldName": "selected",
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            },
            {
              "name": "selectedMarker",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A text or symbol to display in front of the currently selected option",
              "fieldName": "selectedMarker",
              "inheritedFrom": {
                "name": "SearchaliciousSortOption",
                "module": "src/search-sort.ts"
              }
            }
          ],
          "superclass": {
            "name": "SearchaliciousSortOption",
            "module": "src/search-sort.ts"
          },
          "tagName": "searchalicious-sort-field",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousSort",
          "declaration": {
            "name": "SearchaliciousSort",
            "module": "src/search-sort.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-sort",
          "declaration": {
            "name": "SearchaliciousSort",
            "module": "src/search-sort.ts"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousSortOption",
          "declaration": {
            "name": "SearchaliciousSortOption",
            "module": "src/search-sort.ts"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousSortField",
          "declaration": {
            "name": "SearchaliciousSortField",
            "module": "src/search-sort.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-sort-field",
          "declaration": {
            "name": "SearchaliciousSortField",
            "module": "src/search-sort.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-suggestion-entry.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This component represent a suggestion to the user as he types his search.\n\nIt's an internal component meant to be used by the search-bar.",
          "name": "SearchaliciousSuggestionEntry",
          "members": [
            {
              "kind": "field",
              "name": "term",
              "type": {
                "text": "{\n    imageUrl?: string;\n    id: string;\n    text: string;\n    taxonomy_name: string;\n  } | undefined"
              },
              "attribute": "term"
            }
          ],
          "attributes": [
            {
              "name": "term",
              "type": {
                "text": "{\n    imageUrl?: string;\n    id: string;\n    text: string;\n    taxonomy_name: string;\n  } | undefined"
              },
              "fieldName": "term"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-suggestion-entry",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousSuggestionEntry",
          "declaration": {
            "name": "SearchaliciousSuggestionEntry",
            "module": "src/search-suggestion-entry.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-suggestion-entry",
          "declaration": {
            "name": "SearchaliciousSuggestionEntry",
            "module": "src/search-suggestion-entry.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-toggle-charts.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SearchaliciousToggleCharts",
          "members": [
            {
              "kind": "field",
              "name": "chartSideBarState",
              "privacy": "private",
              "default": "new ContextConsumer(this, {\n    context: chartSideBarStateContext,\n    subscribe: true,\n  })",
              "description": "Context consumer for the sidebar state\nIt is provided by the app component"
            },
            {
              "kind": "method",
              "name": "toggleChartsSidebar",
              "privacy": "private",
              "description": "Toggle the charts sidebar\nIt dispatches an event to change the state of the sidebar to app component"
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-toggle-charts",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousToggleCharts",
          "declaration": {
            "name": "SearchaliciousToggleCharts",
            "module": "src/search-toggle-charts.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-toggle-charts",
          "declaration": {
            "name": "SearchaliciousToggleCharts",
            "module": "src/search-toggle-charts.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-toggle.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element that represents a toggle.\n\nThis component is useful to have state of variable reflected back in the toggle,\noverriding updated method.",
          "name": "SearchaliciousToggle",
          "members": [
            {
              "kind": "method",
              "name": "onClick"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Represents the checked state of the input.",
              "attribute": "checked",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the name of the input.",
              "attribute": "name",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the label of the input.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "getInputElement",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchChangeEvent",
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "refreshInput",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "_changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The change event."
                }
              ],
              "description": "Handles the change event on the radio.",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "CheckedInputMixin",
              "module": "/src/mixins/checked-input"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-toggle",
          "customElement": true,
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Represents the checked state of the input.",
              "fieldName": "checked",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the name of the input.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the label of the input.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "CheckedInputMixin",
                "module": "src/mixins/checked-input.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousToggle",
          "declaration": {
            "name": "SearchaliciousToggle",
            "module": "src/search-toggle.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-toggle",
          "declaration": {
            "name": "SearchaliciousToggle",
            "module": "src/search-toggle.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/secondary-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element that represents a secondary button for a search.\nIt sends a custom event \"click\" when clicked.\nYou can modify this variable to customize the button style :\n- --secondary-button-padding",
          "name": "SearchaliciousSecondaryButton",
          "slots": [
            {
              "description": "This slot is for the button contents, default to \"Reset\" string.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "_dispatchEvent",
              "privacy": "private",
              "description": "Dispatches a secondary event."
            },
            {
              "kind": "method",
              "name": "_onClick",
              "privacy": "private",
              "description": "Handles the click event on the secondary button."
            },
            {
              "kind": "method",
              "name": "_onKeyUp",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The keyup event."
                }
              ],
              "description": "Handles the keyup event on the secondary button to dispatch secondary event."
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-secondary-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousSecondaryButton",
          "declaration": {
            "name": "SearchaliciousSecondaryButton",
            "module": "src/secondary-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-secondary-button",
          "declaration": {
            "name": "SearchaliciousSecondaryButton",
            "module": "src/secondary-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/signals.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getDefaultSearchResultDetail",
          "description": "Payload for searchResult signal, before we launch any search\n\nisSearchLaunch is false"
        },
        {
          "kind": "function",
          "name": "canResetSearch",
          "parameters": [
            {
              "name": "searchName",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Function to get the signal to indicate if the search has changed.\nIt is use by reset-button to know if it should be displayed."
        },
        {
          "kind": "function",
          "name": "isSearchChanged",
          "parameters": [
            {
              "name": "searchName",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Function to get the signal to indicate if the search has changed.\nit is used by the search button to know if it should be displayed."
        },
        {
          "kind": "function",
          "name": "searchResultDetail",
          "parameters": [
            {
              "name": "searchName",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Get the SearcResultDetail signal based on search name.\n\nIf the no search was yet launch, return a detail corresponding to no search"
        },
        {
          "kind": "function",
          "name": "isSearchLoading",
          "parameters": [
            {
              "name": "searchName",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Function to get the signal to indicate if the search is loading.\nThe search-results utilize this to determine whether the loading card should be displayed."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getDefaultSearchResultDetail",
          "declaration": {
            "name": "getDefaultSearchResultDetail",
            "module": "src/signals.ts"
          }
        },
        {
          "kind": "js",
          "name": "canResetSearch",
          "declaration": {
            "name": "canResetSearch",
            "module": "src/signals.ts"
          }
        },
        {
          "kind": "js",
          "name": "isSearchChanged",
          "declaration": {
            "name": "isSearchChanged",
            "module": "src/signals.ts"
          }
        },
        {
          "kind": "js",
          "name": "searchResultDetail",
          "declaration": {
            "name": "searchResultDetail",
            "module": "src/signals.ts"
          }
        },
        {
          "kind": "js",
          "name": "isSearchLoading",
          "declaration": {
            "name": "isSearchLoading",
            "module": "src/signals.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/css/header.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "searchBarInputAndButtonStyle",
          "default": "css`\n  input.search-input,\n  button.search-button {\n    line-height: normal;\n    height: 2.35rem;\n    top: 0;\n    box-sizing: border-box;\n    position: relative;\n  }\n`",
          "description": "The styles for the input and button of the search bar."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "searchBarInputAndButtonStyle",
          "declaration": {
            "name": "searchBarInputAndButtonStyle",
            "module": "src/css/header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/css/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "iconStyle",
          "default": "css`\n  .icon {\n    display: inline-block;\n    fill: currentColor;\n    margin-left: 0.25em;\n    margin-right: 0.25em;\n    overflow: hidden;\n    width: 1em;\n    height: 1em;\n  }\n`",
          "description": "The styles for icon elements from off styles"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "iconStyle",
          "declaration": {
            "name": "iconStyle",
            "module": "src/css/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/chart.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element that represents a search icon.\nIt is used to represent the search icon in the search bar.",
          "name": "SearchaliciousIconChart",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "16",
              "attribute": "size"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "16",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-icon-chart",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousIconChart",
          "declaration": {
            "name": "SearchaliciousIconChart",
            "module": "src/icons/chart.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-icon-chart",
          "declaration": {
            "name": "SearchaliciousIconChart",
            "module": "src/icons/chart.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/cross.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element that represents a cross icon.\nYou can modify this variable to customize the icon style :\n--icon-width by default 0.8rem\n--icon-stroke-color by default black",
          "name": "SearchaliciousIconCross",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-icon-cross",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousIconCross",
          "declaration": {
            "name": "SearchaliciousIconCross",
            "module": "src/icons/cross.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-icon-cross",
          "declaration": {
            "name": "SearchaliciousIconCross",
            "module": "src/icons/cross.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/icons/search.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element that represents a search icon.\nIt is used to represent the search icon in the search bar.",
          "name": "SearchaliciousIconSearch",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-icon-search",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousIconSearch",
          "declaration": {
            "name": "SearchaliciousIconSearch",
            "module": "src/icons/search.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-icon-search",
          "declaration": {
            "name": "SearchaliciousIconSearch",
            "module": "src/icons/search.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/layouts/search-layout-page.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component for the layout of the page\n\nIt allows to handle sidebars:\nThree columns layout with display flex,\none for facets, one for the results and one for the chart sidebar",
          "name": "SearchLayoutPage",
          "members": [
            {
              "kind": "field",
              "name": "chartSideBarState",
              "privacy": "private",
              "default": "new ContextConsumer(this, {\n    context: chartSideBarStateContext,\n    subscribe: true,\n    callback: (state: SideBarState) => {\n      if (state !== SideBarState.CLOSED) {\n        // Refresh the charts when the sidebar is opened\n        // if we don't do this, the charts will not be displayed correctly\n        refreshCharts();\n      }\n    },\n  })",
              "description": "Context consumer for the sidebar state\nThis is used to open and close the sidebar"
            },
            {
              "kind": "field",
              "name": "slotNodes",
              "type": {
                "text": "Array<Node>"
              },
              "description": "Slot nodes"
            },
            {
              "kind": "field",
              "name": "searchName",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "attribute": "search-name",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetailSignal",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchResultDetail",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            },
            {
              "kind": "field",
              "name": "_event_setups",
              "type": {
                "text": "{[key: string]: Array<number>}"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "_registrationEventHandlersOnAnimationFrame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SearchaliciousResultCtlMixin",
              "module": "/src/mixins/search-results-ctl"
            },
            {
              "name": "EventRegistrationMixin",
              "module": "/src/event-listener-setup"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-layout-page",
          "customElement": true,
          "attributes": [
            {
              "name": "search-name",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "searchName",
              "inheritedFrom": {
                "name": "SearchaliciousResultCtlMixin",
                "module": "src/mixins/search-results-ctl.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchLayoutPage",
          "declaration": {
            "name": "SearchLayoutPage",
            "module": "src/layouts/search-layout-page.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-layout-page",
          "declaration": {
            "name": "SearchLayoutPage",
            "module": "src/layouts/search-layout-page.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/layouts/search-panel-manager.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This component enables sharing state about panels in a central place.\n\nit should be high in the hierarchy (just below `body`)\nto wrap all other web-components\n\nIt must be used if you want to use the `searchalicious-layout-page` component\n\nIt allows to have a global variable to store with @lit/context",
          "name": "SearchaliciousPanelManager",
          "members": [
            {
              "kind": "field",
              "name": "chartSideBarState",
              "description": "State of the chart sidebar\nEach LitElement that needs to know the state of the sidebar should consume this context\nBy default, the chart sidebar is opened",
              "attribute": "chart-sidebar-state"
            },
            {
              "kind": "field",
              "name": "_event_setups",
              "type": {
                "text": "{[key: string]: Array<number>}"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "_registrationEventHandlersOnAnimationFrame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "chart-sidebar-state",
              "description": "State of the chart sidebar\nEach LitElement that needs to know the state of the sidebar should consume this context\nBy default, the chart sidebar is opened",
              "fieldName": "chartSideBarState"
            }
          ],
          "mixins": [
            {
              "name": "EventRegistrationMixin",
              "module": "/src/event-listener-setup"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "searchalicious-panel-manager",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousPanelManager",
          "declaration": {
            "name": "SearchaliciousPanelManager",
            "module": "src/layouts/search-panel-manager.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "searchalicious-panel-manager",
          "declaration": {
            "name": "SearchaliciousPanelManager",
            "module": "src/layouts/search-panel-manager.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/localization/main.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getBrowserLocale",
          "description": "Get the browser locale, it will keep only the language part"
        },
        {
          "kind": "variable",
          "name": "{getLocale, setLocale}",
          "description": "Configure the localization, it will load the locale files and set the source and target locales"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getBrowserLocale",
          "declaration": {
            "name": "getBrowserLocale",
            "module": "src/localization/main.ts"
          }
        },
        {
          "kind": "js",
          "name": "{getLocale, setLocale}",
          "declaration": {
            "name": "{getLocale, setLocale}",
            "module": "src/localization/main.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/localization/translations.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getPluralTranslation",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "number | undefined | null"
              }
            },
            {
              "name": "singleTranslation",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "pluralTranslation",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Utility functions to take the appropriate translation based on the value\nIf value is <= 1 or null or undefined, it will return the singleTranslation, otherwise the pluralTranslation",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getPluralTranslation",
          "declaration": {
            "name": "getPluralTranslation",
            "module": "src/localization/translations.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/checked-input.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "CheckedInputMixin",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Represents the checked state of the input.",
              "attribute": "checked"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the name of the input.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the label of the input.",
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "getInputElement"
            },
            {
              "kind": "method",
              "name": "_dispatchChangeEvent",
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "refreshInput"
            },
            {
              "kind": "method",
              "name": "updated",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "_changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The change event."
                }
              ],
              "description": "Handles the change event on the radio."
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Represents the checked state of the input.",
              "fieldName": "checked"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the name of the input.",
              "fieldName": "name"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Represents the label of the input.",
              "fieldName": "label"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CheckedInputMixin",
          "declaration": {
            "name": "CheckedInputMixin",
            "module": "src/mixins/checked-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/debounce.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "DebounceMixin",
          "return": {
            "type": {
              "text": "Constructor<DebounceMixinInterface> & T"
            }
          },
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "Constructor<LitElement>"
              },
              "description": "The superclass to extend from."
            }
          ],
          "description": "A mixin class for debouncing function calls.\nIt extends the LitElement class and adds debouncing functionality.\nIt is used to prevent a function from being called multiple times in a short period of time.\nIt is usefull to avoid multiple calls to a function when the user is typing in an input field."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DebounceMixin",
          "declaration": {
            "name": "DebounceMixin",
            "module": "src/mixins/debounce.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/history.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "SEARCH_PARAMS"
        },
        {
          "kind": "mixin",
          "description": "Mixin to handle the history of the search\nIt exists to have the logic of the history in a single place\nIt has to be inherited by SearchaliciousSearchMixin to implement _facetsNodes and _facetsFilters functionss",
          "name": "SearchaliciousHistoryMixin",
          "members": [
            {
              "kind": "field",
              "name": "query",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "name",
              "default": "DEFAULT_SEARCH_NAME",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "_sortElement"
            },
            {
              "kind": "field",
              "name": "_facetsNodes"
            },
            {
              "kind": "field",
              "name": "_facetsFilters"
            },
            {
              "kind": "field",
              "name": "convertHistoryParamsToValues",
              "description": "Convert the URL params to the original values\nIt will be used to set the values from the URL",
              "parameters": [
                {
                  "name": "params"
                }
              ]
            },
            {
              "kind": "field",
              "name": "setValuesFromHistory",
              "description": "Set the values from the history\nIt will set the params from the URL params",
              "parameters": [
                {
                  "name": "values"
                }
              ]
            },
            {
              "kind": "field",
              "name": "buildHistoryParams",
              "description": "Build the history params from the current state\nIt will be used to update the URL when searching",
              "parameters": [
                {
                  "name": "params"
                }
              ]
            },
            {
              "kind": "field",
              "name": "setParamFromUrl",
              "description": "Set the values from the URL\nIt will set the values from the URL and return if a search should be launched"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "default": "DEFAULT_SEARCH_NAME",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "name"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SEARCH_PARAMS",
          "declaration": {
            "name": "SEARCH_PARAMS",
            "module": "src/mixins/history.ts"
          }
        },
        {
          "kind": "js",
          "name": "SearchaliciousHistoryMixin",
          "declaration": {
            "name": "SearchaliciousHistoryMixin",
            "module": "src/mixins/history.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/search-action.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "A mixin class for search actions.\nIt extends the LitElement class and adds search functionality.\nIt is used to launch a search event.",
          "name": "SearchActionMixin",
          "members": [
            {
              "kind": "field",
              "name": "searchName",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "The name of the search bar this sort applies to.\n\nIt must correspond to the `name` property of the corresponding `search-bar` component.\n\nIt enable having multiple search bars on the same page.\n\nIt defaults to `searchalicious`",
              "attribute": "search-name"
            },
            {
              "kind": "method",
              "name": "_launchSearch",
              "description": "Launches a search event.\nIt creates a new event with the search name and dispatches it."
            }
          ],
          "attributes": [
            {
              "name": "search-name",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "The name of the search bar this sort applies to.\n\nIt must correspond to the `name` property of the corresponding `search-bar` component.\n\nIt enable having multiple search bars on the same page.\n\nIt defaults to `searchalicious`",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "searchName"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "Constructor<LitElement>"
              },
              "description": "The superclass to extend from."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchActionMixin",
          "declaration": {
            "name": "SearchActionMixin",
            "module": "src/mixins/search-action.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/search-ctl.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "SearchaliciousSearchMixin",
          "members": [
            {
              "kind": "field",
              "name": "query",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Query that will be sent to searchalicious",
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "default": "DEFAULT_SEARCH_NAME",
              "attribute": "name",
              "description": "The name of this search",
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseUrl",
              "type": {
                "text": "string"
              },
              "default": "'/'",
              "description": "The base api url",
              "attribute": "base-url"
            },
            {
              "kind": "field",
              "name": "langs",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "Separated list of languages",
              "attribute": "langs"
            },
            {
              "kind": "field",
              "name": "index",
              "type": {
                "text": "string | undefined"
              },
              "description": "index to query",
              "attribute": "index"
            },
            {
              "kind": "field",
              "name": "pageSize",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "Number of result per page",
              "attribute": "page-size"
            },
            {
              "kind": "field",
              "name": "_currentPage",
              "type": {
                "text": "number | undefined"
              },
              "description": "Number of result per page"
            },
            {
              "kind": "field",
              "name": "_pageCount",
              "type": {
                "text": "number | undefined"
              },
              "description": "Last search page count"
            },
            {
              "kind": "field",
              "name": "_results",
              "type": {
                "text": "{}[] | undefined"
              },
              "description": "Last search results for current page"
            },
            {
              "kind": "field",
              "name": "_count",
              "type": {
                "text": "number | undefined"
              },
              "description": "Last search total number of results"
            },
            {
              "kind": "field",
              "name": "lastQuery",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Last search query"
            },
            {
              "kind": "field",
              "name": "lastFacetsFilters",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Last search facets filters"
            },
            {
              "kind": "field",
              "name": "isQueryChanged",
              "description": "Check if the query has changed since the last search"
            },
            {
              "kind": "field",
              "name": "isFacetsChanged",
              "description": "Check if the facets filters have changed since the last search"
            },
            {
              "kind": "field",
              "name": "isSearchChanged",
              "description": "Check if the search button text should be displayed"
            },
            {
              "kind": "field",
              "name": "canReset",
              "description": "Check if the filters can be reset\nFilters is facets filters and query"
            },
            {
              "kind": "method",
              "name": "updateSearchSignals"
            },
            {
              "kind": "method",
              "name": "_facetsParentNode",
              "description": "list of facets containers"
            },
            {
              "kind": "method",
              "name": "selectTermByTaxonomy",
              "parameters": [
                {
                  "name": "taxonomy",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "term",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Select a term by taxonomy in all facets\nIt will update the selected terms in facets"
            },
            {
              "kind": "field",
              "name": "_sortElement",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoLaunch",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Wether search should be launched at page load",
              "attribute": "auto-launch"
            },
            {
              "kind": "field",
              "name": "firstSearch",
              "description": "Launch search at page loaded if needed (we have a search in url)"
            },
            {
              "kind": "field",
              "name": "_facetsNodes",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "method",
              "name": "_facets",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "description": "Get the list of facets we want to request"
            },
            {
              "kind": "method",
              "name": "_chartParams",
              "return": {
                "type": {
                  "text": "ChartSearchParam[] | string | undefined"
                }
              },
              "parameters": [
                {
                  "name": "isGetRequest",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Get the list of charts params we want to request"
            },
            {
              "kind": "field",
              "name": "_facetsFilters",
              "description": "Get the filter linked to facets",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetFacets",
              "parameters": [
                {
                  "name": "launchSearch",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_searchUrl",
              "parameters": [
                {
                  "name": "page",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_paramsToQueryStr",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "type": {
                    "text": "SearchParameters"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<any, any>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleSearch",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "External component (like the search button)\ncan use the `searchalicious-search` event\nto trigger a search.\nIt must have the search name in it's data."
            },
            {
              "kind": "method",
              "name": "_handleChangePage",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "External component (like the search pages)\ncan use the `searchalicious-change-page` event\nto ask for page change\nIt must have the search name in it's data."
            },
            {
              "kind": "field",
              "name": "buildParams",
              "description": "Build the params to send to the search API",
              "parameters": [
                {
                  "name": "page"
                }
              ]
            },
            {
              "kind": "method",
              "name": "search",
              "parameters": [
                {
                  "name": "page",
                  "default": "1"
                }
              ],
              "description": "Launching search"
            },
            {
              "kind": "field",
              "name": "convertHistoryParamsToValues",
              "description": "Convert the URL params to the original values\nIt will be used to set the values from the URL",
              "parameters": [
                {
                  "name": "params"
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "field",
              "name": "setValuesFromHistory",
              "description": "Set the values from the history\nIt will set the params from the URL params",
              "parameters": [
                {
                  "name": "values"
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "field",
              "name": "buildHistoryParams",
              "description": "Build the history params from the current state\nIt will be used to update the URL when searching",
              "parameters": [
                {
                  "name": "params"
                }
              ],
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "field",
              "name": "setParamFromUrl",
              "description": "Set the values from the URL\nIt will set the values from the URL and return if a search should be launched",
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "kind": "field",
              "name": "_event_setups",
              "type": {
                "text": "{[key: string]: Array<number>}"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "_registrationEventHandlersOnAnimationFrame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "name",
              "default": "DEFAULT_SEARCH_NAME",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "name",
              "description": "The name of this search",
              "inheritedFrom": {
                "name": "SearchaliciousHistoryMixin",
                "module": "src/mixins/history.ts"
              }
            },
            {
              "name": "base-url",
              "type": {
                "text": "string"
              },
              "default": "'/'",
              "description": "The base api url",
              "fieldName": "baseUrl"
            },
            {
              "name": "langs",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "Separated list of languages",
              "fieldName": "langs"
            },
            {
              "name": "index",
              "type": {
                "text": "string | undefined"
              },
              "description": "index to query",
              "fieldName": "index"
            },
            {
              "name": "page-size",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "Number of result per page",
              "fieldName": "pageSize"
            },
            {
              "name": "auto-launch",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Wether search should be launched at page load",
              "fieldName": "autoLaunch"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@lit-labs/preact-signals"
            },
            {
              "name": "SearchaliciousHistoryMixin",
              "module": "/src/mixins/history"
            },
            {
              "name": "EventRegistrationMixin",
              "module": "/src/event-listener-setup"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousSearchMixin",
          "declaration": {
            "name": "SearchaliciousSearchMixin",
            "module": "src/mixins/search-ctl.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/search-results-ctl.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Common Mixin for elements that react upon a search result\nIt can be to display results, facets or pagination.",
          "name": "SearchaliciousResultCtlMixin",
          "members": [
            {
              "kind": "field",
              "name": "searchName",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "attribute": "search-name"
            },
            {
              "kind": "field",
              "name": "searchResultDetailSignal"
            },
            {
              "kind": "field",
              "name": "searchResultDetail"
            },
            {
              "kind": "field",
              "name": "_event_setups",
              "type": {
                "text": "{[key: string]: Array<number>}"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            },
            {
              "kind": "method",
              "name": "_registrationEventHandlersOnAnimationFrame",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventRegistrationMixin",
                "module": "src/event-listener-setup.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "search-name",
              "default": "DEFAULT_SEARCH_NAME",
              "description": "the search we display result for,\nthis corresponds to `name` attribute of corresponding search-bar",
              "resolveInitializer": {
                "module": "/src/utils/constants"
              },
              "fieldName": "searchName"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@lit-labs/preact-signals"
            },
            {
              "name": "EventRegistrationMixin",
              "module": "/src/event-listener-setup"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousResultCtlMixin",
          "declaration": {
            "name": "SearchaliciousResultCtlMixin",
            "module": "src/mixins/search-results-ctl.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/suggestion-selection.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "This mixin handles the logic of having a list of suggestion,\nand letting the user choose on suggestion.\n\nIt factors the interaction logic but does not deal with the rendering.",
          "name": "SuggestionSelectionMixin",
          "members": [
            {
              "kind": "field",
              "name": "inputName",
              "type": {
                "text": "string"
              },
              "default": "'suggestion'",
              "attribute": "input-name"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "SuggestionSelectionOption[]"
              },
              "default": "[]",
              "description": "The options for the suggestion.\nIt is provided by the parent component."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "currentIndex",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isLoading",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "getOptionIndex",
              "description": "This method is used to get the current index.\nIt remove the offset of 1 because the currentIndex is 1-based.",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "currentOption"
            },
            {
              "kind": "method",
              "name": "getInput"
            },
            {
              "kind": "method",
              "name": "onInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  },
                  "description": "The input event."
                }
              ],
              "description": "Handles the input event on the suggestion and dispatch custom event : \"suggestion-input\"."
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "blurInput",
              "description": "This method is used to remove focus from the input element.\nIt is used to quit after selecting an option."
            },
            {
              "kind": "method",
              "name": "resetInput",
              "description": "This method is used to reset the input value and blur it.\nIt is used to reset the input after a search."
            },
            {
              "kind": "method",
              "name": "submit",
              "parameters": [
                {
                  "name": "isSuggestion",
                  "default": "false",
                  "description": "A boolean value to check if the value is a suggestion.",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "This method is used to submit the input value.\nIt is used to submit the input value after selecting an option."
            },
            {
              "kind": "method",
              "name": "handleArrowKey",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "string"
                  },
                  "description": "The direction of the arrow key event."
                }
              ],
              "description": "Handles keyboard event to navigate the suggestion list"
            },
            {
              "kind": "method",
              "name": "handleEnter",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "When Enter is pressed:\n  * if an option was selected (using keyboard arrows) it becomes the value\n  * otherwise the input string is the value\nWe then submit the value."
            },
            {
              "kind": "method",
              "name": "handleEscape",
              "description": "This method is used to handle the escape key event."
            },
            {
              "kind": "method",
              "name": "onKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "dispatch key events according to the key pressed (arrows or enter)"
            },
            {
              "kind": "method",
              "name": "onClick",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "On a click on the suggestion option, we select it as value and submit it."
            },
            {
              "kind": "method",
              "name": "onFocus",
              "description": "This method is used to handle the focus event on the input element.\nIt is used to show the suggestion options when the input is focused."
            },
            {
              "kind": "method",
              "name": "onBlur",
              "description": "This method is used to handle the blur event on the input element.\nIt is used to hide the suggestion options when the input is blurred.\nIt is debounced to avoid to quit before select with click."
            }
          ],
          "attributes": [
            {
              "name": "input-name",
              "type": {
                "text": "string"
              },
              "default": "'suggestion'",
              "fieldName": "inputName"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "DebounceMixin",
              "module": "/src/mixins/debounce"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SuggestionSelectionMixin",
          "declaration": {
            "name": "SuggestionSelectionMixin",
            "module": "src/mixins/suggestion-selection.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/suggestions-ctl.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "A mixin class for Searchalicious terms.\nIt allows to get taxonomies terms and store them in termsByTaxonomyId.",
          "name": "SearchaliciousTermsMixin",
          "members": [
            {
              "kind": "field",
              "name": "terms",
              "type": {
                "text": "TermOption[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "isTermsLoading",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "taxonomiesBaseUrl",
              "type": {
                "text": "string"
              },
              "default": "'/'",
              "attribute": "base-url"
            },
            {
              "kind": "field",
              "name": "langs",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "attribute": "langs"
            },
            {
              "kind": "method",
              "name": "_termsUrl",
              "parameters": [
                {
                  "name": "q",
                  "type": {
                    "text": "string"
                  },
                  "description": "The query string."
                },
                {
                  "name": "taxonomyNames",
                  "type": {
                    "text": "string[]"
                  },
                  "description": "The taxonomy names."
                }
              ],
              "description": "build URL to search taxonomies terms from input",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "getTaxonomiesTerms",
              "return": {
                "type": {
                  "text": "Promise<TaxomiesTermsResponse>"
                }
              },
              "parameters": [
                {
                  "name": "q",
                  "type": {
                    "text": "string"
                  },
                  "description": "The query string."
                },
                {
                  "name": "taxonomyNames",
                  "type": {
                    "text": "string[]"
                  },
                  "description": "The taxonomy names."
                }
              ],
              "description": "Method to get taxonomies terms."
            },
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The version of the object",
              "inheritedFrom": {
                "name": "VersioningMixin",
                "module": "src/mixins/versioning.ts"
              }
            },
            {
              "kind": "method",
              "name": "incrementVersion",
              "description": "Increment the version of the object",
              "inheritedFrom": {
                "name": "VersioningMixin",
                "module": "src/mixins/versioning.ts"
              }
            },
            {
              "kind": "method",
              "name": "isLatestVersion",
              "parameters": [
                {
                  "name": "version",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Check if the version is the latest",
              "inheritedFrom": {
                "name": "VersioningMixin",
                "module": "src/mixins/versioning.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "base-url",
              "type": {
                "text": "string"
              },
              "default": "'/'",
              "fieldName": "taxonomiesBaseUrl"
            },
            {
              "name": "langs",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "fieldName": "langs"
            }
          ],
          "mixins": [
            {
              "name": "VersioningMixin",
              "module": "/src/mixins/versioning"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "Constructor<LitElement>"
              },
              "description": "The superclass to extend from."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchaliciousTermsMixin",
          "declaration": {
            "name": "SearchaliciousTermsMixin",
            "module": "src/mixins/suggestions-ctl.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/utils.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/versioning.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "VersioningMixin",
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The version of the object"
            },
            {
              "kind": "method",
              "name": "incrementVersion",
              "description": "Increment the version of the object"
            },
            {
              "kind": "method",
              "name": "isLatestVersion",
              "parameters": [
                {
                  "name": "version",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Check if the version is the latest"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VersioningMixin",
          "declaration": {
            "name": "VersioningMixin",
            "module": "src/mixins/versioning.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "WHITE_PANEL_STYLE",
          "default": "css`\n  .white-panel {\n    margin-bottom: 1rem;\n    background-color: white;\n    padding: 0.5rem;\n    border-radius: 5px;\n  }\n`"
        },
        {
          "kind": "variable",
          "name": "HIDE_STYLE",
          "default": "css`\n  .hidden {\n    display: none;\n  }\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WHITE_PANEL_STYLE",
          "declaration": {
            "name": "WHITE_PANEL_STYLE",
            "module": "src/styles/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "HIDE_STYLE",
          "declaration": {
            "name": "HIDE_STYLE",
            "module": "src/styles/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/test/search-bar_test.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/test/search-button_test.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/test/search-pages_test.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/test/search-results_test.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/test/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "resetSignalToDefault",
          "description": "Utility function for test to reset signal state"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "resetSignalToDefault",
          "declaration": {
            "name": "resetSignalToDefault",
            "module": "src/test/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/charts.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "refreshCharts",
          "description": "Refresh vega charts by dispatching a resize event\nThis is needed because vega charts are not displayed correctly because of the hidden sidebar"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "refreshCharts",
          "declaration": {
            "name": "refreshCharts",
            "module": "src/utils/charts.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/constants.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FACET_TERM_OTHER",
          "type": {
            "text": "string"
          },
          "default": "'--other--'"
        },
        {
          "kind": "variable",
          "name": "API_LIST_DIVIDER",
          "type": {
            "text": "string"
          },
          "default": "','"
        },
        {
          "kind": "variable",
          "name": "PROPERTY_LIST_DIVIDER",
          "type": {
            "text": "string"
          },
          "default": "','"
        },
        {
          "kind": "variable",
          "name": "DEFAULT_SEARCH_NAME",
          "type": {
            "text": "string"
          },
          "default": "'searchalicious'"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FACET_TERM_OTHER",
          "declaration": {
            "name": "FACET_TERM_OTHER",
            "module": "src/utils/constants.ts"
          }
        },
        {
          "kind": "js",
          "name": "API_LIST_DIVIDER",
          "declaration": {
            "name": "API_LIST_DIVIDER",
            "module": "src/utils/constants.ts"
          }
        },
        {
          "kind": "js",
          "name": "PROPERTY_LIST_DIVIDER",
          "declaration": {
            "name": "PROPERTY_LIST_DIVIDER",
            "module": "src/utils/constants.ts"
          }
        },
        {
          "kind": "js",
          "name": "DEFAULT_SEARCH_NAME",
          "declaration": {
            "name": "DEFAULT_SEARCH_NAME",
            "module": "src/utils/constants.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/enums.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "filterObjectByKeys",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "keys",
              "type": {
                "text": "string[]"
              }
            }
          ],
          "description": "Filter an object by keys"
        },
        {
          "kind": "function",
          "name": "isNullOrUndefined",
          "return": {
            "type": {
              "text": "value is null | undefined"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "unknown"
              }
            }
          ],
          "description": "Check if a value is null or undefined"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "filterObjectByKeys",
          "declaration": {
            "name": "filterObjectByKeys",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "isNullOrUndefined",
          "declaration": {
            "name": "isNullOrUndefined",
            "module": "src/utils/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/search.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isTheSameSearchName",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "searchName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "event",
              "type": {
                "text": "Event"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isTheSameSearchName",
          "declaration": {
            "name": "isTheSameSearchName",
            "module": "src/utils/search.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/taxonomies.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getTaxonomyName",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "taxonomy",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Get the taxonomy name from the taxonomy string"
        },
        {
          "kind": "function",
          "name": "removeLangFromTermId",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "termId",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Remove the language from the term id\nFor exemple: en:termId => termId"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getTaxonomyName",
          "declaration": {
            "name": "getTaxonomyName",
            "module": "src/utils/taxonomies.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeLangFromTermId",
          "declaration": {
            "name": "removeLangFromTermId",
            "module": "src/utils/taxonomies.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/url.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "setURLHistory",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "url",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "params",
              "type": {
                "text": "Record<string, string | undefined>"
              }
            }
          ],
          "description": "Set the URL parameters history"
        },
        {
          "kind": "function",
          "name": "setCurrentURLHistory",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "params",
              "type": {
                "text": "Record<string, string | undefined>"
              }
            }
          ],
          "description": "Set the current URL parameters history"
        },
        {
          "kind": "function",
          "name": "removeParenthesis",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Remove parenthesis from a string\nfor example: \"(test OR test2)\" => \"test OR test2\""
        },
        {
          "kind": "function",
          "name": "addParamPrefix",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "prefix",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Add a prefix to a string\nfor example: addParamPrefix('test', 'off') => 'off_test'"
        },
        {
          "kind": "function",
          "name": "addParamPrefixes",
          "return": {
            "type": {
              "text": "Record<string, unknown>"
            }
          },
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "name": "prefix",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Add a prefix to all keys of an object"
        },
        {
          "kind": "function",
          "name": "removeParamPrefix",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "prefix",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Remove a prefix from a string\nfor example: removeParamPrefix('off_test', 'off') => 'test'"
        },
        {
          "kind": "function",
          "name": "removeParamPrefixes",
          "return": {
            "type": {
              "text": "Record<string, string>"
            }
          },
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Record<string, string>"
              }
            },
            {
              "name": "prefix",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Remove a prefix from all keys of an object"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "setURLHistory",
          "declaration": {
            "name": "setURLHistory",
            "module": "src/utils/url.ts"
          }
        },
        {
          "kind": "js",
          "name": "setCurrentURLHistory",
          "declaration": {
            "name": "setCurrentURLHistory",
            "module": "src/utils/url.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeParenthesis",
          "declaration": {
            "name": "removeParenthesis",
            "module": "src/utils/url.ts"
          }
        },
        {
          "kind": "js",
          "name": "addParamPrefix",
          "declaration": {
            "name": "addParamPrefix",
            "module": "src/utils/url.ts"
          }
        },
        {
          "kind": "js",
          "name": "addParamPrefixes",
          "declaration": {
            "name": "addParamPrefixes",
            "module": "src/utils/url.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeParamPrefix",
          "declaration": {
            "name": "removeParamPrefix",
            "module": "src/utils/url.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeParamPrefixes",
          "declaration": {
            "name": "removeParamPrefixes",
            "module": "src/utils/url.ts"
          }
        }
      ]
    }
  ]
}
